{"version":3,"file":"js/156.d4807299.js","mappings":"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","sources":["webpack://kwplayer/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/vorbis/VorbisStream.js","webpack://kwplayer/./node_modules/music-metadata/lib/flac/FlacParser.js","webpack://kwplayer/./node_modules/music-metadata/lib/flac/FlacToken.js","webpack://kwplayer/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { AttachedPictureType } from '../../id3v2/ID3v2Token.js';\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nexport class VorbisPictureToken {\n    static fromBase64(base64str) {\n        return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), c => c.charCodeAt(0)));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        offset += 4;\n        const mimeLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const format = new Token.StringType(mimeLen, 'utf-8').get(buffer, offset);\n        offset += mimeLen;\n        const descLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const description = new Token.StringType(descLen, 'utf-8').get(buffer, offset);\n        offset += descLen;\n        const width = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const height = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const colour_depth = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const indexed_color = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const picDataLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const data = buffer.slice(offset, offset + picDataLen);\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexport const CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: Token.UINT8.get(buf, off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexport const IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        return {\n            version: Token.UINT32_LE.get(uint8Array, off + 0),\n            channelMode: Token.UINT8.get(uint8Array, off + 4),\n            sampleRate: Token.UINT32_LE.get(uint8Array, off + 5),\n            bitrateMax: Token.UINT32_LE.get(uint8Array, off + 9),\n            bitrateNominal: Token.UINT32_LE.get(uint8Array, off + 13),\n            bitrateMin: Token.UINT32_LE.get(uint8Array, off + 17)\n        };\n    }\n};\n","import * as Token from 'token-types';\nimport debugInit from 'debug';\nimport { VorbisDecoder } from './VorbisDecoder.js';\nimport { CommonHeader, IdentificationHeader, VorbisPictureToken } from './Vorbis.js';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nconst debug = debugInit('music-metadata:parser:ogg:vorbis1');\nexport class VorbisContentError extends makeUnexpectedFileContentError('Vorbis') {\n}\n/**\n * Vorbis 1 Parser.\n * Used by OggStream\n */\nexport class VorbisStream {\n    constructor(metadata, options) {\n        this.pageSegments = [];\n        this.durationOnLastPage = true;\n        this.metadata = metadata;\n        this.options = options;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        this.lastPageHeader = header;\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n        else {\n            if (header.headerType.continued) {\n                if (this.pageSegments.length === 0) {\n                    throw new VorbisContentError('Cannot continue on previous page');\n                }\n                this.pageSegments.push(pageData);\n            }\n            if (header.headerType.lastPage || !header.headerType.continued) {\n                // Flush page segments\n                if (this.pageSegments.length > 0) {\n                    const fullPage = VorbisStream.mergeUint8Arrays(this.pageSegments);\n                    await this.parseFullPage(fullPage);\n                }\n                // Reset page segments\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\n            }\n        }\n    }\n    static mergeUint8Arrays(arrays) {\n        const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);\n        const merged = new Uint8Array(totalSize);\n        arrays.forEach((array, i, _arrays) => {\n            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);\n            merged.set(array, offset);\n        });\n        return merged;\n    }\n    async flush() {\n        await this.parseFullPage(VorbisStream.mergeUint8Arrays(this.pageSegments));\n    }\n    async parseUserComment(pageData, offset) {\n        const decoder = new VorbisDecoder(pageData, offset);\n        const tag = decoder.parseUserComment();\n        await this.addTag(tag.key, tag.value);\n        return tag.len;\n    }\n    async addTag(id, value) {\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\n            if (this.options.skipCovers) {\n                debug(\"Ignore picture\");\n                return;\n            }\n            value = VorbisPictureToken.fromBase64(value);\n            debug(`Push picture: id=${id}, format=${value.format}`);\n        }\n        else {\n            debug(`Push tag: id=${id}, value=${value}`);\n        }\n        await this.metadata.addTag('vorbis', id, value);\n    }\n    calculateDuration() {\n        if (this.lastPageHeader && this.metadata.format.sampleRate && this.lastPageHeader.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            this.metadata.setFormat('numberOfSamples', this.lastPageHeader.absoluteGranulePosition);\n            this.metadata.setFormat('duration', this.lastPageHeader.absoluteGranulePosition / this.metadata.format.sampleRate);\n        }\n    }\n    /**\n     * Parse first Ogg/Vorbis page\n     * @param _header\n     * @param pageData\n     */\n    parseFirstPage(_header, pageData) {\n        this.metadata.setFormat('codec', 'Vorbis I');\n        this.metadata.setFormat('hasAudio', true);\n        debug('Parse first page');\n        // Parse  Vorbis common header\n        const commonHeader = CommonHeader.get(pageData, 0);\n        if (commonHeader.vorbis !== 'vorbis')\n            throw new VorbisContentError('Metadata does not look like Vorbis');\n        if (commonHeader.packetType === 1) {\n            const idHeader = IdentificationHeader.get(pageData, CommonHeader.len);\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\n            debug('sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s', idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\n        }\n        else\n            throw new VorbisContentError('First Ogg page should be type 1: the identification header');\n    }\n    async parseFullPage(pageData) {\n        // New page\n        const commonHeader = CommonHeader.get(pageData, 0);\n        debug('Parse full page: type=%s, byteLength=%s', commonHeader.packetType, pageData.byteLength);\n        switch (commonHeader.packetType) {\n            case 3: //  type 3: comment header\n                return this.parseUserCommentList(pageData, CommonHeader.len);\n            case 1: // type 1: the identification header\n            case 5: // type 5: setup header type\n                break; // ignore\n        }\n    }\n    /**\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n     */\n    async parseUserCommentList(pageData, offset) {\n        const strLen = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\n        offset += strLen;\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        while (userCommentListLength-- > 0) {\n            offset += (await this.parseUserComment(pageData, offset));\n        }\n    }\n}\n","import initDebug from 'debug';\nimport { Uint8ArrayType } from 'token-types';\nimport { VorbisPictureToken } from '../ogg/vorbis/Vorbis.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { VorbisStream } from '../ogg/vorbis/VorbisStream.js';\nimport { VorbisDecoder } from '../ogg/vorbis/VorbisDecoder.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport * as Flac from './FlacToken.js';\nconst debug = initDebug('music-metadata:parser:FLAC');\nclass FlacContentError extends makeUnexpectedFileContentError('FLAC') {\n}\nexport class FlacParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.vorbisParser = new VorbisStream(this.metadata, this.options);\n        this.padding = 0;\n    }\n    async postId3v2Parse() {\n        const fourCC = await this.tokenizer.readToken(FourCcToken);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new FlacContentError('Invalid FLAC preamble');\n        }\n        let blockHeader;\n        do {\n            // Read block header\n            blockHeader = await this.tokenizer.readToken(Flac.BlockHeader);\n            // Parse block data\n            await this.parseDataBlock(blockHeader);\n        } while (!blockHeader.lastBlock);\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n        }\n    }\n    async parseDataBlock(blockHeader) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case Flac.BlockType.STREAMINFO:\n                return this.readBlockStreamInfo(blockHeader.length);\n            case Flac.BlockType.PADDING:\n                this.padding += blockHeader.length;\n                break;\n            case Flac.BlockType.APPLICATION:\n                break;\n            case Flac.BlockType.SEEKTABLE:\n                break;\n            case Flac.BlockType.VORBIS_COMMENT:\n                return this.readComment(blockHeader.length);\n            case Flac.BlockType.CUESHEET:\n                break;\n            case Flac.BlockType.PICTURE:\n                await this.parsePicture(blockHeader.length);\n                return;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    async readBlockStreamInfo(dataLen) {\n        if (dataLen !== Flac.BlockStreamInfo.len)\n            throw new FlacContentError('Unexpected block-stream-info length');\n        const streamInfo = await this.tokenizer.readToken(Flac.BlockStreamInfo);\n        this.metadata.setFormat('container', 'FLAC');\n        this.processsStreamInfo(streamInfo);\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    processsStreamInfo(streamInfo) {\n        this.metadata.setFormat('codec', 'FLAC');\n        this.metadata.setFormat('hasAudio', true);\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\n        if (streamInfo.totalSamples > 0) {\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\n        }\n    }\n    /**\n     * Read VORBIS_COMMENT from tokenizer\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async readComment(dataLen) {\n        const data = await this.tokenizer.readToken(new Uint8ArrayType(dataLen));\n        return this.parseComment(data);\n    }\n    /**\n     * Parse VORBIS_COMMENT\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async parseComment(data) {\n        const decoder = new VorbisDecoder(data, 0);\n        const vendor = decoder.readStringUtf8();\n        if (vendor.length > 0) {\n            this.metadata.setFormat('tool', vendor);\n        }\n        const commentListLength = decoder.readInt32();\n        const tags = new Array(commentListLength);\n        for (let i = 0; i < commentListLength; i++) {\n            tags[i] = decoder.parseUserComment();\n        }\n        await Promise.all(tags.map(tag => {\n            if (tag.key === 'ENCODER') {\n                this.metadata.setFormat('tool', tag.value);\n            }\n            return this.addTag(tag.key, tag.value);\n        }));\n    }\n    async parsePicture(dataLen) {\n        if (this.options.skipCovers) {\n            return this.tokenizer.ignore(dataLen);\n        }\n        return this.addPictureTag(await this.tokenizer.readToken(new VorbisPictureToken(dataLen)));\n    }\n    addPictureTag(picture) {\n        return this.addTag('METADATA_BLOCK_PICTURE', picture);\n    }\n    addTag(id, value) {\n        return this.vorbisParser.addTag(id, value);\n    }\n}\n","import * as util from '../common/Util.js';\nimport { UINT16_BE, UINT24_BE, Uint8ArrayType } from 'token-types';\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nexport const BlockType = {\n    STREAMINFO: 0, // STREAMINFO\n    PADDING: 1, // PADDING\n    APPLICATION: 2, // APPLICATION\n    SEEKTABLE: 3, // SEEKTABLE\n    VORBIS_COMMENT: 4, // VORBIS_COMMENT\n    CUESHEET: 5, // CUESHEET\n    PICTURE: 6 // PICTURE\n};\nexport const BlockHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            lastBlock: util.getBit(buf, off, 7),\n            type: util.getBitAllignedNumber(buf, off, 1, 7),\n            length: UINT24_BE.get(buf, off + 1)\n        };\n    }\n};\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\nexport const BlockStreamInfo = {\n    len: 34,\n    get: (buf, off) => {\n        return {\n            // The minimum block size (in samples) used in the stream.\n            minimumBlockSize: UINT16_BE.get(buf, off),\n            // The maximum block size (in samples) used in the stream.\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n            maximumBlockSize: UINT16_BE.get(buf, off + 2) / 1000,\n            // The minimum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            minimumFrameSize: UINT24_BE.get(buf, off + 4),\n            // The maximum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            maximumFrameSize: UINT24_BE.get(buf, off + 7),\n            // Sample rate in Hz. Though 20 bits are available,\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n            // Also, a value of 0 is invalid.\n            sampleRate: UINT24_BE.get(buf, off + 10) >> 4,\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\n            channels: util.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n            // bits per sample)-1.\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n            bitsPerSample: util.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n            // Total samples in stream.\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n            // A value of zero here means the number of total samples is unknown.\n            totalSamples: util.getBitAllignedNumber(buf, off + 13, 4, 36),\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n            fileMD5: new Uint8ArrayType(16).get(buf, off + 18)\n        };\n    }\n};\n","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n","import * as Token from 'token-types';\nimport { textDecode } from '@borewit/text-codec';\nexport class VorbisDecoder {\n    constructor(data, offset) {\n        this.data = data;\n        this.offset = offset;\n    }\n    readInt32() {\n        const value = Token.UINT32_LE.get(this.data, this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readStringUtf8() {\n        const len = this.readInt32();\n        const value = textDecode(this.data.subarray(this.offset, this.offset + len), 'utf-8');\n        this.offset += len;\n        return value;\n    }\n    parseUserComment() {\n        const offset0 = this.offset;\n        const v = this.readStringUtf8();\n        const idx = v.indexOf('=');\n        return {\n            key: v.substring(0, idx).toUpperCase(),\n            value: v.substring(idx + 1),\n            len: this.offset - offset0\n        };\n    }\n}\n"],"names":["VorbisPictureToken","fromBase64","base64str","fromBuffer","Uint8Array","from","atob","c","charCodeAt","buffer","pic","length","get","constructor","len","this","offset","type","AttachedPictureType","Token","mimeLen","format","descLen","description","width","height","colour_depth","indexed_color","picDataLen","data","slice","CommonHeader","buf","off","packetType","vorbis","IdentificationHeader","uint8Array","version","channelMode","sampleRate","bitrateMax","bitrateNominal","bitrateMin","debug","debugInit","VorbisContentError","makeUnexpectedFileContentError","VorbisStream","metadata","options","pageSegments","durationOnLastPage","parsePage","header","pageData","lastPageHeader","headerType","firstPage","parseFirstPage","continued","push","lastPage","fullPage","mergeUint8Arrays","parseFullPage","arrays","totalSize","reduce","acc","e","merged","forEach","array","i","_arrays","set","flush","parseUserComment","decoder","VorbisDecoder","tag","addTag","key","value","id","skipCovers","calculateDuration","absoluteGranulePosition","setFormat","_header","commonHeader","idHeader","byteLength","parseUserCommentList","strLen","userCommentListLength","initDebug","FlacContentError","FlacParser","AbstractID3Parser","super","arguments","vorbisParser","padding","postId3v2Parse","fourCC","tokenizer","readToken","FourCcToken","toString","blockHeader","Flac","parseDataBlock","lastBlock","fileInfo","size","duration","dataSize","position","STREAMINFO","readBlockStreamInfo","PADDING","APPLICATION","SEEKTABLE","VORBIS_COMMENT","readComment","CUESHEET","PICTURE","parsePicture","addWarning","ignore","then","dataLen","streamInfo","processsStreamInfo","channels","bitsPerSample","totalSamples","Uint8ArrayType","parseComment","vendor","readStringUtf8","commentListLength","readInt32","tags","Array","Promise","all","map","addPictureTag","picture","BlockType","BlockHeader","util","UINT24_BE","BlockStreamInfo","minimumBlockSize","UINT16_BE","maximumBlockSize","minimumFrameSize","maximumFrameSize","fileMD5","BasicParser","id3parser","ID3v2Parser","startsWithID3v2Header","peekToken","ID3v2Header","fileIdentifier","parse","parseID3v2","err","EndOfStreamError","finalize","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser","ID3v1Parser","id3Header","textDecode","subarray","offset0","v","idx","indexOf","substring","toUpperCase"],"sourceRoot":""}