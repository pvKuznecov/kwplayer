{"version":3,"file":"js/989.19a10bbb.js","mappings":"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","sources":["webpack://kwplayer/./node_modules/music-metadata/lib/dsf/DsfChunk.js","webpack://kwplayer/./node_modules/music-metadata/lib/dsf/DsfParser.js","webpack://kwplayer/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexport const ChunkHeader = {\n    len: 12,\n    get: (buf, off) => {\n        return { id: FourCcToken.get(buf, off), size: Token.UINT64_LE.get(buf, off + 4) };\n    }\n};\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexport const DsdChunk = {\n    len: 16,\n    get: (buf, off) => {\n        return {\n            fileSize: Token.INT64_LE.get(buf, off),\n            metadataPointer: Token.INT64_LE.get(buf, off + 8)\n        };\n    }\n};\nexport const ChannelType = {\n    mono: 1,\n    stereo: 2,\n    channels: 3,\n    quad: 4,\n    '4 channels': 5,\n    '5 channels': 6,\n    '5.1 channels': 7\n};\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexport const FormatChunk = {\n    len: 40,\n    get: (buf, off) => {\n        return {\n            formatVersion: Token.INT32_LE.get(buf, off),\n            formatID: Token.INT32_LE.get(buf, off + 4),\n            channelType: Token.INT32_LE.get(buf, off + 8),\n            channelNum: Token.INT32_LE.get(buf, off + 12),\n            samplingFrequency: Token.INT32_LE.get(buf, off + 16),\n            bitsPerSample: Token.INT32_LE.get(buf, off + 20),\n            sampleCount: Token.INT64_LE.get(buf, off + 24),\n            blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)\n        };\n    }\n};\n","import initDebug from 'debug';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { ChunkHeader, DsdChunk, FormatChunk } from './DsfChunk.js';\nimport { ID3v2Parser } from \"../id3v2/ID3v2Parser.js\";\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:DSF');\nexport class DsdContentParseError extends makeUnexpectedFileContentError('DSD') {\n}\n/**\n * DSF (dsd stream file) File Parser\n * Ref: https://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf\n */\nexport class DsfParser extends AbstractID3Parser {\n    async postId3v2Parse() {\n        const p0 = this.tokenizer.position; // mark start position, normally 0\n        const chunkHeader = await this.tokenizer.readToken(ChunkHeader);\n        if (chunkHeader.id !== 'DSD ')\n            throw new DsdContentParseError('Invalid chunk signature');\n        this.metadata.setFormat('container', 'DSF');\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setAudioOnly();\n        const dsdChunk = await this.tokenizer.readToken(DsdChunk);\n        if (dsdChunk.metadataPointer === BigInt(0)) {\n            debug(\"No ID3v2 tag present\");\n        }\n        else {\n            debug(`expect ID3v2 at offset=${dsdChunk.metadataPointer}`);\n            await this.parseChunks(dsdChunk.fileSize - chunkHeader.size);\n            // Jump to ID3 header\n            await this.tokenizer.ignore(Number(dsdChunk.metadataPointer) - this.tokenizer.position - p0);\n            return new ID3v2Parser().parse(this.metadata, this.tokenizer, this.options);\n        }\n    }\n    async parseChunks(bytesRemaining) {\n        while (bytesRemaining >= ChunkHeader.len) {\n            const chunkHeader = await this.tokenizer.readToken(ChunkHeader);\n            debug(`Parsing chunk name=${chunkHeader.id} size=${chunkHeader.size}`);\n            switch (chunkHeader.id) {\n                case 'fmt ': {\n                    const formatChunk = await this.tokenizer.readToken(FormatChunk);\n                    this.metadata.setFormat('numberOfChannels', formatChunk.channelNum);\n                    this.metadata.setFormat('sampleRate', formatChunk.samplingFrequency);\n                    this.metadata.setFormat('bitsPerSample', formatChunk.bitsPerSample);\n                    this.metadata.setFormat('numberOfSamples', formatChunk.sampleCount);\n                    this.metadata.setFormat('duration', Number(formatChunk.sampleCount) / formatChunk.samplingFrequency);\n                    const bitrate = formatChunk.bitsPerSample * formatChunk.samplingFrequency * formatChunk.channelNum;\n                    this.metadata.setFormat('bitrate', bitrate);\n                    return; // We got what we want, stop further processing of chunks\n                }\n                default:\n                    this.tokenizer.ignore(Number(chunkHeader.size) - ChunkHeader.len);\n                    break;\n            }\n            bytesRemaining -= chunkHeader.size;\n        }\n    }\n}\n","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n"],"names":["ChunkHeader","len","get","buf","off","id","FourCcToken","size","Token","DsdChunk","fileSize","metadataPointer","FormatChunk","formatVersion","formatID","channelType","channelNum","samplingFrequency","bitsPerSample","sampleCount","blockSizePerChannel","debug","initDebug","DsdContentParseError","makeUnexpectedFileContentError","DsfParser","AbstractID3Parser","postId3v2Parse","p0","this","tokenizer","position","chunkHeader","readToken","metadata","setFormat","setAudioOnly","dsdChunk","BigInt","parseChunks","ignore","Number","ID3v2Parser","parse","options","bytesRemaining","formatChunk","bitrate","BasicParser","constructor","super","arguments","id3parser","startsWithID3v2Header","peekToken","ID3v2Header","fileIdentifier","parseID3v2","err","EndOfStreamError","finalize","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser","ID3v1Parser","id3Header"],"sourceRoot":""}