{"version":3,"file":"js/219.b320d892.js","mappings":"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","sources":["webpack://kwplayer/./node_modules/music-metadata/lib/id3v2/FrameParser.js","webpack://kwplayer/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"sourcesContent":["import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { AttachedPictureType, SyncTextHeader, TextEncodingToken, TextHeader } from './ID3v2Token.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport { decodeUintBE } from '../common/Util.js';\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nexport function parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = parseGenreCode(word);\n        }\n        if (word) {\n            genres.push(word);\n        }\n    }\n    return genres;\n}\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return Genres[Number.parseInt(code)];\n    }\n}\nexport class FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'GRP1': // iTunes-specific ID3v2 grouping field\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST': {\n                let text;\n                try {\n                    text = util.decodeString(uint8Array.subarray(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    if (error instanceof Error) {\n                        this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                        break;\n                    }\n                    throw error;\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = FrameParser.functionList(this.splitValue(type, text));\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            }\n            case 'TXXX': {\n                const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                const textTag = {\n                    description: idAndData.id,\n                    text: this.splitValue(type, util.decodeString(idAndData.data, encoding).replace(/\\x00+$/, ''))\n                };\n                output = textTag;\n                break;\n            }\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = util.decodeString(uint8Array.subarray(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw makeUnexpectedMajorVersionError(this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = util.findZero(uint8Array, offset, length, encoding);\n                    pic.description = util.decodeString(uint8Array.subarray(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = uint8Array.subarray(offset, length);\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = decodeUintBE(uint8Array);\n                break;\n            case 'SYLT': {\n                const syltHeader = SyncTextHeader.get(uint8Array, 0);\n                offset += SyncTextHeader.len;\n                const result = {\n                    descriptor: '',\n                    language: syltHeader.language,\n                    contentType: syltHeader.contentType,\n                    timeStampFormat: syltHeader.timeStampFormat,\n                    syncText: []\n                };\n                let readSyllables = false;\n                while (offset < length) {\n                    const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);\n                    offset += nullStr.len;\n                    if (readSyllables) {\n                        const timestamp = Token.UINT32_BE.get(uint8Array, offset);\n                        offset += Token.UINT32_BE.len;\n                        result.syncText.push({\n                            text: nullStr.text,\n                            timestamp\n                        });\n                    }\n                    else {\n                        result.descriptor = nullStr.text;\n                        readSyllables = true;\n                    }\n                }\n                output = result;\n                break;\n            }\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM': {\n                const textHeader = TextHeader.get(uint8Array, offset);\n                offset += TextHeader.len;\n                const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                offset += descriptorStr.len;\n                const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                const comment = {\n                    language: textHeader.language,\n                    descriptor: descriptorStr.text,\n                    text: textStr.text\n                };\n                output = comment;\n                break;\n            }\n            case 'UFID': {\n                const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: ufid.id, identifier: ufid.data };\n                break;\n            }\n            case 'PRIV': { // private frame\n                const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: priv.id, data: priv.data };\n                break;\n            }\n            case 'POPM': { // Popularimeter\n                fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                const email = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const valueLen = length - offset - 1;\n                output = {\n                    email,\n                    rating: Token.UINT8.get(uint8Array, offset),\n                    counter: valueLen > 0 ? util.decodeUintBE(uint8Array.subarray(offset + 1)) : undefined\n                };\n                break;\n            }\n            case 'GEOB': { // General encapsulated object\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = util.decodeString(uint8Array.subarray(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const filename = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const description = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const geob = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.subarray(offset, length)\n                };\n                output = geob;\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                output = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const description = util.decodeString(uint8Array.subarray(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf-16le' ? 2 : 1);\n                output = { description, url: util.decodeString(uint8Array.subarray(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = util.decodeString(uint8Array.subarray(offset + 1, util.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.subarray(0, length);\n                break;\n            }\n            default:\n                debug(`Warning: unsupported id3v2-tag-type: ${type}`);\n                break;\n        }\n        return output;\n    }\n    static readNullTerminatedString(uint8Array, encoding) {\n        let offset = encoding.bom ? 2 : 0;\n        const zeroIndex = util.findZero(uint8Array, offset, uint8Array.length, encoding.encoding);\n        const txt = uint8Array.subarray(offset, zeroIndex);\n        if (encoding.encoding === 'utf-16le') {\n            offset = zeroIndex + 2;\n        }\n        else {\n            offset = zeroIndex + 1;\n        }\n        return {\n            text: util.decodeString(txt, encoding.encoding),\n            len: offset\n        };\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = util.findZero(uint8Array, offset, length, encoding);\n        const id = util.decodeString(uint8Array.subarray(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.subarray(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf-16le' ? 2 : 1;\n    }\n}\nexport class Id3v2ContentError extends makeUnexpectedFileContentError('id3v2') {\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { FrameParser, Id3v2ContentError } from './FrameParser.js';\nimport { ExtendedHeader, ID3v2Header, UINT32SYNCSAFE } from './ID3v2Token.js';\nimport { textDecode } from '@borewit/text-codec';\nexport class ID3v2Parser {\n    constructor() {\n        this.tokenizer = undefined;\n        this.id3Header = undefined;\n        this.metadata = undefined;\n        this.headerType = undefined;\n        this.options = undefined;\n    }\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.subarray(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags?.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags?.format.data_length_indicator) {\n                    uint8Array = uint8Array.subarray(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? `:${description}` : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Id3v2ContentError('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = (`ID3v2.${id3Header.version.major}`);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            switch (tag.id) {\n                case 'TXXX':\n                    if (tag.value) {\n                        await this.handleTag(tag, tag.value.text, () => tag.value.description);\n                    }\n                    break;\n                default:\n                    await (Array.isArray(tag.value) ? Promise.all(tag.value.map(value => this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));\n            }\n        }\n    }\n    async handleTag(tag, values, descriptor, resolveValue = value => value) {\n        await Promise.all(values.map(value => this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.subarray(offset, offset + frameHeaderLength);\n            offset += frameHeaderLength;\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.subarray(offset, offset + frameHeader.length);\n            offset += frameHeader.length;\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: textDecode(uint8Array.subarray(0, 3), 'ascii'),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: textDecode(uint8Array.subarray(0, 4), 'ascii'),\n                    length: (majorVer === 4 ? UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.subarray(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n        return header;\n    }\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n"],"names":["debug","initDebug","defaultEnc","parseGenre","origVal","genres","code","word","c","undefined","push","genre","parseGenreCode","length","match","Genres","Number","parseInt","FrameParser","constructor","major","warningCollector","this","readData","uint8Array","type","includeCovers","addWarning","encoding","bom","TextEncodingToken","get","offset","output","nullTerminatorLength","getNullTerminatorLength","fzero","text","util","subarray","replace","error","Error","message","functionList","splitValue","map","v","reduce","acc","val","concat","Array","isArray","idAndData","readIdentifierAndData","textTag","description","id","data","pic","format","makeUnexpectedMajorVersionError","fixPictureMimeType","AttachedPictureType","decodeUintBE","syltHeader","SyncTextHeader","len","result","descriptor","language","contentType","timeStampFormat","syncText","readSyllables","nullStr","readNullTerminatedString","timestamp","Token","textHeader","TextHeader","descriptorStr","textStr","comment","ufid","owner_identifier","identifier","priv","email","valueLen","rating","counter","mimeType","filename","geob","url","zeroIndex","txt","pictureType","toLocaleLowerCase","entries","res","i","names","split","tag","values","trimArray","value","trim","enc","Id3v2ContentError","makeUnexpectedFileContentError","majorVer","ID3v2Parser","tokenizer","id3Header","metadata","headerType","options","removeUnsyncBytes","buffer","readI","writeI","getFrameHeaderLength","readFrameFlags","b","status","tag_alter_preservation","file_alter_preservation","read_only","grouping_identity","compression","encryption","unsynchronisation","data_length_indicator","readFrameData","frameHeader","frameParser","flags","makeDescriptionTagName","parse","readToken","ID3v2Header","fileIdentifier","version","isExtendedHeader","parseExtendedHeader","parseId3Data","size","extendedHeader","ExtendedHeader","dataRemaining","parseExtendedHeaderData","extendedHeaderSize","ignore","dataLen","parseMetadata","handleTag","Promise","all","addTag","resolveValue","tags","frameHeaderLength","frameHeaderBytes","readFrameHeader","frameDataBytes","skipCovers","header","textDecode","UINT32SYNCSAFE"],"sourceRoot":""}