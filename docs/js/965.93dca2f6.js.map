{"version":3,"file":"js/965.93dca2f6.js","mappings":"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","sources":["webpack://kwplayer/./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js","webpack://kwplayer/./node_modules/music-metadata/lib/musepack/MusepackConentError.js","webpack://kwplayer/./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js","webpack://kwplayer/./node_modules/music-metadata/lib/musepack/sv7/BitReader.js","webpack://kwplayer/./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js","webpack://kwplayer/./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js","webpack://kwplayer/./node_modules/music-metadata/lib/musepack/MusepackParser.js","webpack://kwplayer/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as util from '../../common/Util.js';\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\nconst PacketKey = new Token.StringType(2, 'latin1');\n/**\n * Stream Header Packet part 1\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part1 = {\n    len: 5,\n    get: (buf, off) => {\n        return {\n            crc: Token.UINT32_LE.get(buf, off),\n            streamVersion: Token.UINT8.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Stream Header Packet part 3\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part3 = {\n    len: 2,\n    get: (buf, off) => {\n        return {\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off, 0, 3)],\n            maxUsedBands: util.getBitAllignedNumber(buf, off, 3, 5),\n            channelCount: util.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\n            msUsed: util.isBitSet(buf, off + 1, 4),\n            audioBlockFrames: util.getBitAllignedNumber(buf, off + 1, 5, 3)\n        };\n    }\n};\nexport class StreamReader {\n    get tokenizer() {\n        return this._tokenizer;\n    }\n    set tokenizer(value) {\n        this._tokenizer = value;\n    }\n    constructor(_tokenizer) {\n        this._tokenizer = _tokenizer;\n    }\n    async readPacketHeader() {\n        const key = await this.tokenizer.readToken(PacketKey);\n        const size = await this.readVariableSizeField();\n        return {\n            key,\n            payloadLength: size.value - 2 - size.len\n        };\n    }\n    async readStreamHeader(size) {\n        const streamHeader = {};\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\n        const part1 = await this.tokenizer.readToken(SH_part1);\n        size -= SH_part1.len;\n        Object.assign(streamHeader, part1);\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\n        const sampleCount = await this.readVariableSizeField();\n        size -= sampleCount.len;\n        streamHeader.sampleCount = sampleCount.value;\n        const bs = await this.readVariableSizeField();\n        size -= bs.len;\n        streamHeader.beginningOfSilence = bs.value;\n        const part3 = await this.tokenizer.readToken(SH_part3);\n        size -= SH_part3.len;\n        Object.assign(streamHeader, part3);\n        // assert.equal(size, 0);\n        await this.tokenizer.ignore(size);\n        return streamHeader;\n    }\n    async readVariableSizeField(len = 1, hb = 0) {\n        let n = await this.tokenizer.readNumber(Token.UINT8);\n        if ((n & 0x80) === 0) {\n            return { len, value: hb + n };\n        }\n        n &= 0x7F;\n        n += hb;\n        return this.readVariableSizeField(len + 1, n << 7);\n    }\n}\n","import { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class MusepackContentError extends makeUnexpectedFileContentError('Musepack') {\n}\n","import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { tryParseApeHeader } from '../../apev2/APEv2Parser.js';\nimport { FourCcToken } from '../../common/FourCC.js';\nimport * as SV8 from './StreamVersion8.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv8Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const signature = await this.tokenizer.readToken(FourCcToken);\n        if (signature !== 'MPCK')\n            throw new MusepackContentError('Invalid Magic number');\n        this.metadata.setFormat('container', 'Musepack, SV8');\n        return this.parsePacket();\n    }\n    async parsePacket() {\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\n        do {\n            const header = await sv8reader.readPacketHeader();\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\n            switch (header.key) {\n                case 'SH': { // Stream Header\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\n                    break;\n                }\n                case 'AP': // Audio Packet\n                    this.audioLength += header.payloadLength;\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'RG': // Replaygain\n                case 'EI': // Encoder Info\n                case 'SO': // Seek Table Offset\n                case 'ST': // Seek Table\n                case 'CT': // Chapter-Tag\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'SE': // Stream End\n                    if (this.metadata.format.duration) {\n                        this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\n                    }\n                    return tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n                default:\n                    throw new MusepackContentError(`Unexpected header: ${header.key}`);\n            }\n            // biome-ignore lint/correctness/noConstantCondition: break is handled in the switch statement\n        } while (true);\n    }\n}\n","import * as Token from 'token-types';\nexport class BitReader {\n    constructor(tokenizer) {\n        this.pos = 0;\n        this.dword = null;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     *\n     * @param bits 1..30 bits\n     */\n    async read(bits) {\n        while (this.dword === null) {\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        }\n        let out = this.dword;\n        this.pos += bits;\n        if (this.pos < 32) {\n            out >>>= (32 - this.pos);\n            return out & ((1 << bits) - 1);\n        }\n        this.pos -= 32;\n        if (this.pos === 0) {\n            this.dword = null;\n            return out & ((1 << bits) - 1);\n        }\n        this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        if (this.pos) {\n            out <<= this.pos;\n            out |= this.dword >>> (32 - this.pos);\n        }\n        return out & ((1 << bits) - 1);\n    }\n    async ignore(bits) {\n        if (this.pos > 0) {\n            const remaining = 32 - this.pos;\n            this.dword = null;\n            bits -= remaining;\n            this.pos = 0;\n        }\n        const remainder = bits % 32;\n        const numOfWords = (bits - remainder) / 32;\n        await this.tokenizer.ignore(numOfWords * 4);\n        return this.read(remainder);\n    }\n}\n","import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\nimport { textDecode } from '@borewit/text-codec';\n/**\n * BASIC STRUCTURE\n */\nexport const Header = {\n    len: 6 * 4,\n    get: (buf, off) => {\n        const header = {\n            // word 0\n            signature: textDecode(buf.subarray(off, off + 3), 'latin1'),\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\n            streamMinorVersion: util.getBitAllignedNumber(buf, off + 3, 0, 4),\n            streamMajorVersion: util.getBitAllignedNumber(buf, off + 3, 4, 4),\n            // word 1\n            frameCount: Token.UINT32_LE.get(buf, off + 4),\n            // word 2\n            maxLevel: Token.UINT16_LE.get(buf, off + 8),\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off + 10, 0, 2)],\n            link: util.getBitAllignedNumber(buf, off + 10, 2, 2),\n            profile: util.getBitAllignedNumber(buf, off + 10, 4, 4),\n            maxBand: util.getBitAllignedNumber(buf, off + 11, 0, 6),\n            intensityStereo: util.isBitSet(buf, off + 11, 6),\n            midSideStereo: util.isBitSet(buf, off + 11, 7),\n            // word 3\n            titlePeak: Token.UINT16_LE.get(buf, off + 12),\n            titleGain: Token.UINT16_LE.get(buf, off + 14),\n            // word 4\n            albumPeak: Token.UINT16_LE.get(buf, off + 16),\n            albumGain: Token.UINT16_LE.get(buf, off + 18),\n            // word\n            lastFrameLength: (Token.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,\n            trueGapless: util.isBitSet(buf, off + 23, 0)\n        };\n        header.lastFrameLength = header.trueGapless ? (Token.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;\n        return header;\n    }\n};\n","import initDebug from 'debug';\nimport { BasicParser } from '../../common/BasicParser.js';\nimport { tryParseApeHeader } from '../../apev2/APEv2Parser.js';\nimport { BitReader } from './BitReader.js';\nimport * as SV7 from './StreamVersion7.js';\nimport { MusepackContentError } from '../MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MpcSv7Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.bitreader = null;\n        this.audioLength = 0;\n        this.duration = null;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(SV7.Header);\n        if (header.signature !== 'MP+')\n            throw new MusepackContentError('Unexpected magic number');\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n        this.metadata.setFormat('container', 'Musepack, SV7');\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n        this.duration = numberOfSamples / header.sampleFrequency;\n        this.metadata.setFormat('duration', this.duration);\n        this.bitreader = new BitReader(this.tokenizer);\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n        const version = await this.bitreader.read(8);\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\n        await this.skipAudioData(header.frameCount);\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n        return tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async skipAudioData(frameCount) {\n        while (frameCount-- > 0) {\n            const frameLength = await this.bitreader.read(20);\n            this.audioLength += 20 + frameLength;\n            await this.bitreader.ignore(frameLength);\n        }\n        // last frame\n        const lastFrameLength = await this.bitreader.read(11);\n        this.audioLength += lastFrameLength;\n        if (this.duration !== null) {\n            this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n        }\n    }\n}\n","import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { MpcSv8Parser } from './sv8/MpcSv8Parser.js';\nimport { MpcSv7Parser } from './sv7/MpcSv7Parser.js';\nimport { MusepackContentError } from './MusepackConentError.js';\nconst debug = initDebug('music-metadata:parser:musepack');\nexport class MusepackParser extends AbstractID3Parser {\n    async postId3v2Parse() {\n        const signature = await this.tokenizer.peekToken(new Token.StringType(3, 'latin1'));\n        let mpcParser;\n        switch (signature) {\n            case 'MP+': {\n                debug('Stream-version 7');\n                mpcParser = new MpcSv7Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            case 'MPC': {\n                debug('Stream-version 8');\n                mpcParser = new MpcSv8Parser(this.metadata, this.tokenizer, this.options);\n                break;\n            }\n            default: {\n                throw new MusepackContentError('Invalid signature prefix');\n            }\n        }\n        this.metadata.setAudioOnly();\n        return mpcParser.parse();\n    }\n}\n","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n"],"names":["debug","initDebug","PacketKey","Token","SH_part1","len","get","buf","off","crc","streamVersion","SH_part3","sampleFrequency","util","maxUsedBands","channelCount","msUsed","audioBlockFrames","StreamReader","tokenizer","this","_tokenizer","value","constructor","readPacketHeader","key","readToken","size","readVariableSizeField","payloadLength","readStreamHeader","streamHeader","position","part1","Object","assign","sampleCount","bs","beginningOfSilence","part3","ignore","hb","n","readNumber","MusepackContentError","makeUnexpectedFileContentError","MpcSv8Parser","BasicParser","super","arguments","audioLength","parse","signature","FourCcToken","metadata","setFormat","parsePacket","sv8reader","SV8","header","sh","format","duration","tryParseApeHeader","options","BitReader","pos","dword","read","bits","out","remaining","remainder","numOfWords","Header","textDecode","subarray","streamMinorVersion","streamMajorVersion","frameCount","maxLevel","link","profile","maxBand","intensityStereo","midSideStereo","titlePeak","titleGain","albumPeak","albumGain","lastFrameLength","trueGapless","MpcSv7Parser","bitreader","SV7","numberOfSamples","version","toFixed","skipAudioData","frameLength","MusepackParser","AbstractID3Parser","postId3v2Parse","peekToken","mpcParser","setAudioOnly","id3parser","ID3v2Parser","startsWithID3v2Header","ID3v2Header","fileIdentifier","parseID3v2","err","EndOfStreamError","finalize","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser","ID3v1Parser","id3Header"],"sourceRoot":""}