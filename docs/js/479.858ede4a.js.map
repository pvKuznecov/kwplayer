{"version":3,"file":"js/479.858ede4a.js","mappings":"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","sources":["webpack://kwplayer/./node_modules/music-metadata/lib/mp4/AtomToken.js","webpack://kwplayer/./node_modules/music-metadata/lib/mp4/Atom.js","webpack://kwplayer/./node_modules/music-metadata/lib/mp4/MP4Parser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport * as util from '../common/Util.js';\nconst debug = initDebug('music-metadata:parser:MP4:atom');\nexport class Mp4ContentError extends makeUnexpectedFileContentError('MP4') {\n}\nexport const Header = {\n    len: 8,\n    get: (buf, off) => {\n        const length = Token.UINT32_BE.get(buf, off);\n        if (length < 0)\n            throw new Mp4ContentError('Invalid atom header length');\n        return {\n            length: BigInt(length),\n            name: new Token.StringType(4, 'latin1').get(buf, off + 4)\n        };\n    },\n    put: (buf, off, hdr) => {\n        Token.UINT32_BE.put(buf, off, Number(hdr.length));\n        return FourCcToken.put(buf, off + 4, hdr.name);\n    }\n};\n/**\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190\n */\nexport const ExtendedSize = Token.UINT64_BE;\nexport const ftyp = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new Token.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\n/**\n * Token: Movie Header Atom\n */\nexport const mhdr = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            nextItemID: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Base class for 'fixed' length atoms.\n * In some cases these atoms are longer then the sum of the described fields.\n * Issue: https://github.com/Borewit/music-metadata/issues/120\n */\nexport class FixedLengthAtom {\n    /**\n     *\n     * @param {number} len Length as specified in the size field\n     * @param {number} expLen Total length of sum of specified fields in the standard\n     * @param atomId Atom ID\n     */\n    constructor(len, expLen, atomId) {\n        if (len < expLen) {\n            throw new Mp4ContentError(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);\n        }\n        if (len > expLen) {\n            debug(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);\n        }\n        this.len = len;\n    }\n}\n/**\n * Timestamp stored in seconds since Mac Epoch (1 January 1904)\n */\nconst SecondsSinceMacEpoch = {\n    len: 4,\n    get: (buf, off) => {\n        const secondsSinceUnixEpoch = Token.UINT32_BE.get(buf, off) - 2082844800;\n        return new Date(secondsSinceUnixEpoch * 1000);\n    }\n};\n/**\n * Token: Media Header Atom\n * Ref:\n * - https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34\n * - https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd\n */\nexport class MdhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 24, 'mdhd');\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off + 0),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            language: Token.UINT16_BE.get(buf, off + 20),\n            quality: Token.UINT16_BE.get(buf, off + 22)\n        };\n    }\n}\n/**\n * Token: Movie Header Atom\n */\nexport class MvhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 100, 'mvhd');\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            preferredRate: Token.UINT32_BE.get(buf, off + 20),\n            preferredVolume: Token.UINT16_BE.get(buf, off + 24),\n            // ignore reserver: 10 bytes\n            // ignore matrix structure: 36 bytes\n            previewTime: Token.UINT32_BE.get(buf, off + 72),\n            previewDuration: Token.UINT32_BE.get(buf, off + 76),\n            posterTime: Token.UINT32_BE.get(buf, off + 80),\n            selectionTime: Token.UINT32_BE.get(buf, off + 84),\n            selectionDuration: Token.UINT32_BE.get(buf, off + 88),\n            currentTime: Token.UINT32_BE.get(buf, off + 92),\n            nextTrackID: Token.UINT32_BE.get(buf, off + 96)\n        };\n    }\n}\n/**\n * Data Atom Structure\n */\nexport class DataAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            type: {\n                set: Token.UINT8.get(buf, off + 0),\n                type: Token.UINT24_BE.get(buf, off + 1)\n            },\n            locale: Token.UINT24_BE.get(buf, off + 4),\n            value: new Token.Uint8ArrayType(this.len - 8).get(buf, off + 8)\n        };\n    }\n}\n/**\n * Data Atom Structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31\n */\nexport class NameAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            name: new Token.StringType(this.len - 4, 'utf-8').get(buf, off + 4)\n        };\n    }\n}\n/**\n * Track Header Atoms structure (`tkhd`)\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550\n */\nexport class TrackHeaderAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            trackId: Token.UINT32_BE.get(buf, off + 12),\n            // reserved 4 bytes\n            duration: Token.UINT32_BE.get(buf, off + 20),\n            layer: Token.UINT16_BE.get(buf, off + 24),\n            alternateGroup: Token.UINT16_BE.get(buf, off + 26),\n            volume: Token.UINT16_BE.get(buf, off + 28) // ToDo: fixed point\n            // ToDo: add remaining fields\n        };\n    }\n}\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nconst stsdHeader = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            numberOfEntries: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/documentation/quicktime-file-format/sample_description_atom\n */\nclass SampleDescriptionTable {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const descrLen = this.len - 12;\n        return {\n            dataFormat: FourCcToken.get(buf, off),\n            dataReferenceIndex: Token.UINT16_BE.get(buf, off + 10),\n            description: descrLen > 0 ? new Token.Uint8ArrayType(descrLen).get(buf, off + 12) : undefined\n        };\n    }\n}\n/**\n * Atom: Sample-description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nexport class StsdAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const header = stsdHeader.get(buf, off);\n        off += stsdHeader.len;\n        const table = [];\n        for (let n = 0; n < header.numberOfEntries; ++n) {\n            const size = Token.UINT32_BE.get(buf, off); // Sample description size\n            off += Token.UINT32_BE.len;\n            table.push(new SampleDescriptionTable(size - Token.UINT32_BE.len).get(buf, off));\n            off += size;\n        }\n        return {\n            header,\n            table\n        };\n    }\n}\n/**\n * Common Sound Sample Description (version & revision)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317\n */\nexport const SoundSampleDescriptionVersion = {\n    len: 8,\n    get(buf, off) {\n        return {\n            version: Token.INT16_BE.get(buf, off),\n            revision: Token.INT16_BE.get(buf, off + 2),\n            vendor: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Sound Sample Description (Version 0)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736\n */\nexport const SoundSampleDescriptionV0 = {\n    len: 12,\n    get(buf, off) {\n        return {\n            numAudioChannels: Token.INT16_BE.get(buf, off + 0),\n            sampleSize: Token.INT16_BE.get(buf, off + 2),\n            compressionId: Token.INT16_BE.get(buf, off + 4),\n            packetSize: Token.INT16_BE.get(buf, off + 6),\n            sampleRate: Token.UINT16_BE.get(buf, off + 8) + Token.UINT16_BE.get(buf, off + 10) / 10000\n        };\n    }\n};\nclass SimpleTableAtom {\n    constructor(len, token) {\n        this.len = len;\n        this.token = token;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 4);\n        return {\n            version: Token.INT8.get(buf, off + 0),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)\n        };\n    }\n}\nexport const TimeToSampleToken = {\n    len: 8,\n    get(buf, off) {\n        return {\n            count: Token.INT32_BE.get(buf, off + 0),\n            duration: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Time-to-sample('stts') atom.\n * Store duration information for a media’s samples.\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696\n */\nexport class SttsAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, TimeToSampleToken);\n    }\n}\nexport const SampleToChunkToken = {\n    len: 12,\n    get(buf, off) {\n        return {\n            firstChunk: Token.INT32_BE.get(buf, off),\n            samplesPerChunk: Token.INT32_BE.get(buf, off + 4),\n            sampleDescriptionId: Token.INT32_BE.get(buf, off + 8)\n        };\n    }\n};\n/**\n * Sample-to-Chunk ('stsc') atom interface\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706\n */\nexport class StscAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, SampleToChunkToken);\n    }\n}\n/**\n * Sample-size ('stsz') atom\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710\n */\nexport class StszAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 8);\n        return {\n            version: Token.INT8.get(buf, off),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            sampleSize: Token.INT32_BE.get(buf, off + 4),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, Token.INT32_BE, off + 12, this.len - 12, nrOfEntries)\n        };\n    }\n}\n/**\n * Chunk offset atom, 'stco'\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715\n */\nexport class StcoAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, Token.INT32_BE);\n        this.len = len;\n    }\n}\n/**\n * Token used to decode text-track from 'mdat' atom (raw data stream)\n */\nexport class ChapterText {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const titleLen = Token.INT16_BE.get(buf, off + 0);\n        const str = new Token.StringType(titleLen, 'utf-8');\n        return str.get(buf, off + 2);\n    }\n}\nfunction readTokenTable(buf, token, off, remainingLen, numberOfEntries) {\n    debug(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);\n    if (remainingLen === 0)\n        return [];\n    if (remainingLen !== numberOfEntries * token.len)\n        throw new Mp4ContentError('mismatch number-of-entries with remaining atom-length');\n    const entries = [];\n    // parse offset-table\n    for (let n = 0; n < numberOfEntries; ++n) {\n        entries.push(token.get(buf, off));\n        off += token.len;\n    }\n    return entries;\n}\n/**\n * Sample-size ('tfhd') TrackFragmentHeaderBox\n */\nexport class TrackFragmentHeaderBox {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const flagOffset = off + 1;\n        const header = {\n            version: Token.INT8.get(buf, off),\n            flags: {\n                baseDataOffsetPresent: util.getBit(buf, flagOffset + 2, 0),\n                sampleDescriptionIndexPresent: util.getBit(buf, flagOffset + 2, 1),\n                defaultSampleDurationPresent: util.getBit(buf, flagOffset + 2, 3),\n                defaultSampleSizePresent: util.getBit(buf, flagOffset + 2, 4),\n                defaultSampleFlagsPresent: util.getBit(buf, flagOffset + 2, 5),\n                defaultDurationIsEmpty: util.getBit(buf, flagOffset, 0),\n                defaultBaseIsMoof: util.getBit(buf, flagOffset, 1)\n            },\n            trackId: Token.UINT32_BE.get(buf, 4)\n        };\n        let dynOffset = 8;\n        if (header.flags.baseDataOffsetPresent) {\n            header.baseDataOffset = Token.UINT64_BE.get(buf, dynOffset);\n            dynOffset += 8;\n        }\n        if (header.flags.sampleDescriptionIndexPresent) {\n            header.sampleDescriptionIndex = Token.UINT32_BE.get(buf, dynOffset);\n            dynOffset += 4;\n        }\n        if (header.flags.defaultSampleDurationPresent) {\n            header.defaultSampleDuration = Token.UINT32_BE.get(buf, dynOffset);\n            dynOffset += 4;\n        }\n        if (header.flags.defaultSampleSizePresent) {\n            header.defaultSampleSize = Token.UINT32_BE.get(buf, dynOffset);\n            dynOffset += 4;\n        }\n        if (header.flags.defaultSampleFlagsPresent) {\n            header.defaultSampleFlags = Token.UINT32_BE.get(buf, dynOffset);\n        }\n        return header;\n    }\n}\n/**\n * Sample-size ('trun') TrackRunBox\n */\nexport class TrackRunBox {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const flagOffset = off + 1;\n        const trun = {\n            version: Token.INT8.get(buf, off),\n            flags: {\n                dataOffsetPresent: util.getBit(buf, flagOffset + 2, 0),\n                firstSampleFlagsPresent: util.getBit(buf, flagOffset + 2, 2),\n                sampleDurationPresent: util.getBit(buf, flagOffset + 1, 0),\n                sampleSizePresent: util.getBit(buf, flagOffset + 1, 1),\n                sampleFlagsPresent: util.getBit(buf, flagOffset + 1, 2),\n                sampleCompositionTimeOffsetsPresent: util.getBit(buf, flagOffset + 1, 3)\n            },\n            sampleCount: Token.UINT32_BE.get(buf, off + 4),\n            samples: []\n        };\n        let dynOffset = off + 8;\n        if (trun.flags.dataOffsetPresent) {\n            trun.dataOffset = Token.UINT32_BE.get(buf, dynOffset);\n            dynOffset += 4;\n        }\n        if (trun.flags.firstSampleFlagsPresent) {\n            trun.firstSampleFlags = Token.UINT32_BE.get(buf, dynOffset);\n            dynOffset += 4;\n        }\n        for (let n = 0; n < trun.sampleCount; ++n) {\n            if (dynOffset >= this.len) {\n                debug(\"TrackRunBox size mismatch\");\n                break;\n            }\n            const sample = {};\n            if (trun.flags.sampleDurationPresent) {\n                sample.sampleDuration = Token.UINT32_BE.get(buf, dynOffset);\n                dynOffset += 4;\n            }\n            if (trun.flags.sampleSizePresent) {\n                sample.sampleSize = Token.UINT32_BE.get(buf, dynOffset);\n                dynOffset += 4;\n            }\n            if (trun.flags.sampleFlagsPresent) {\n                sample.sampleFlags = Token.UINT32_BE.get(buf, dynOffset);\n                dynOffset += 4;\n            }\n            if (trun.flags.sampleCompositionTimeOffsetsPresent) {\n                sample.sampleCompositionTimeOffset = Token.UINT32_BE.get(buf, dynOffset);\n                dynOffset += 4;\n            }\n            trun.samples.push(sample);\n        }\n        return trun;\n    }\n}\n/**\n * HandlerBox (`hdlr`)\n */\nexport class HandlerBox {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const _flagOffset = off + 1;\n        const charTypeToken = new Token.StringType(4, 'utf-8');\n        return {\n            version: Token.INT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            componentType: charTypeToken.get(buf, off + 4),\n            handlerType: charTypeToken.get(buf, off + 8),\n            componentName: new Token.StringType(this.len - 28, 'utf-8').get(buf, off + 28),\n        };\n    }\n}\n/**\n * Chapter Track Reference Box (`chap`)\n */\nexport class ChapterTrackReferenceBox {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        let dynOffset = 0;\n        const trackIds = [];\n        while (dynOffset < this.len) {\n            trackIds.push(Token.UINT32_BE.get(buf, off + dynOffset));\n            dynOffset += 4;\n        }\n        return trackIds;\n    }\n}\n","import initDebug from 'debug';\nimport * as AtomToken from './AtomToken.js';\nimport { Header } from './AtomToken.js';\nconst debug = initDebug('music-metadata:parser:MP4:Atom');\nexport class Atom {\n    static async readAtom(tokenizer, dataHandler, parent, remaining) {\n        // Parse atom header\n        const offset = tokenizer.position;\n        debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')\n        const header = await tokenizer.readToken(AtomToken.Header);\n        const extended = header.length === 1n;\n        if (extended) {\n            header.length = await tokenizer.readToken(AtomToken.ExtendedSize);\n        }\n        const atomBean = new Atom(header, extended, parent);\n        const payloadLength = atomBean.getPayloadLength(remaining);\n        debug(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`); //  buf.toString('ascii')\n        await atomBean.readData(tokenizer, dataHandler, payloadLength);\n        return atomBean;\n    }\n    constructor(header, extended, parent) {\n        this.header = header;\n        this.extended = extended;\n        this.parent = parent;\n        this.children = [];\n        this.atomPath = (this.parent ? `${this.parent.atomPath}.` : '') + this.header.name;\n    }\n    getHeaderLength() {\n        return this.extended ? 16 : 8;\n    }\n    getPayloadLength(remaining) {\n        return (this.header.length === 0n ? remaining : Number(this.header.length)) - this.getHeaderLength();\n    }\n    async readAtoms(tokenizer, dataHandler, size) {\n        while (size > 0) {\n            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);\n            this.children.push(atomBean);\n            size -= atomBean.header.length === 0n ? size : Number(atomBean.header.length);\n        }\n    }\n    async readData(tokenizer, dataHandler, remaining) {\n        switch (this.header.name) {\n            // \"Container\" atoms, contains nested atoms\n            case 'moov': // The Movie Atom: contains other atoms\n            case 'udta': // User defined atom\n            case 'mdia': // Media atom\n            case 'minf': // Media Information Atom\n            case 'stbl': // The Sample Table Atom\n            case '<id>':\n            case 'ilst':\n            case 'tref':\n            case 'moof':\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));\n            case 'meta': { // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n                // meta has 4 bytes of padding, ignore\n                const peekHeader = await tokenizer.peekToken(Header);\n                const paddingLength = peekHeader.name === 'hdlr' ? 0 : 4;\n                await tokenizer.ignore(paddingLength);\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - paddingLength);\n            }\n            default:\n                return dataHandler(this, remaining);\n        }\n    }\n}\n","import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { Atom } from './Atom.js';\nimport * as AtomToken from './AtomToken.js';\nimport { ChapterTrackReferenceBox, Mp4ContentError, } from './AtomToken.js';\nimport { TrackType } from '../type.js';\nimport { uint8ArrayToHex } from 'uint8array-extras';\nimport { textDecode } from '@borewit/text-codec';\nconst debug = initDebug('music-metadata:parser:MP4');\nconst tagFormat = 'iTunes';\nconst encoderDict = {\n    raw: {\n        lossy: false,\n        format: 'raw'\n    },\n    MAC3: {\n        lossy: true,\n        format: 'MACE 3:1'\n    },\n    MAC6: {\n        lossy: true,\n        format: 'MACE 6:1'\n    },\n    ima4: {\n        lossy: true,\n        format: 'IMA 4:1'\n    },\n    ulaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    alaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    Qclp: {\n        lossy: true,\n        format: 'QUALCOMM PureVoice'\n    },\n    '.mp3': {\n        lossy: true,\n        format: 'MPEG-1 layer 3'\n    },\n    alac: {\n        lossy: false,\n        format: 'ALAC'\n    },\n    'ac-3': {\n        lossy: true,\n        format: 'AC-3'\n    },\n    mp4a: {\n        lossy: true,\n        format: 'MPEG-4/AAC'\n    },\n    mp4s: {\n        lossy: true,\n        format: 'MP4S'\n    },\n    // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87\n    c608: {\n        lossy: true,\n        format: 'CEA-608'\n    },\n    c708: {\n        lossy: true,\n        format: 'CEA-708'\n    }\n};\nfunction distinct(value, index, self) {\n    return self.indexOf(value) === index;\n}\n/*\n * Parser for the MP4 (MPEG-4 Part 14) container format\n * Standard: ISO/IEC 14496-14\n * supporting:\n * - QuickTime container\n * - MP4 File Format\n * - 3GPP file format\n * - 3GPP2 file format\n *\n * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.\n * Support for Apple iTunes tags as found in a M4A/M4V files.\n * Ref:\n *   https://en.wikipedia.org/wiki/ISO_base_media_file_format\n *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html\n *   http://atomicparsley.sourceforge.net/mpeg-4files.html\n *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\n *   https://wiki.multimedia.cx/index.php/QuickTime_container\n */\nexport class MP4Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.tracks = new Map();\n        this.hasVideoTrack = false;\n        this.hasAudioTrack = true;\n        this.atomParsers = {\n            /**\n             * Parse movie header (mvhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313\n             */\n            mvhd: async (len) => {\n                const mvhd = await this.tokenizer.readToken(new AtomToken.MvhdAtom(len));\n                this.metadata.setFormat('creationTime', mvhd.creationTime);\n                this.metadata.setFormat('modificationTime', mvhd.modificationTime);\n            },\n            chap: async (len) => {\n                const td = this.getTrackDescription();\n                const trackIds = [];\n                while (len >= Token.UINT32_BE.len) {\n                    trackIds.push(await this.tokenizer.readNumber(Token.UINT32_BE));\n                    len -= Token.UINT32_BE.len;\n                }\n                td.chapterList = trackIds;\n            },\n            /**\n             * Parse mdat atom.\n             * Will scan for chapters\n             */\n            mdat: async (len) => {\n                this.audioLengthInBytes = len;\n                this.calculateBitRate();\n                if (this.options.includeChapters) {\n                    const trackWithChapters = [...this.tracks.values()].filter(track => track.chapterList);\n                    if (trackWithChapters.length === 1) {\n                        const chapterTrackIds = trackWithChapters[0].chapterList;\n                        const chapterTracks = [...this.tracks.values()].filter(track => chapterTrackIds.indexOf(track.header.trackId) !== -1);\n                        if (chapterTracks.length === 1) {\n                            return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);\n                        }\n                    }\n                }\n                await this.tokenizer.ignore(len);\n            },\n            ftyp: async (len) => {\n                const types = [];\n                while (len > 0) {\n                    const ftype = await this.tokenizer.readToken(AtomToken.ftyp);\n                    len -= AtomToken.ftyp.len;\n                    const value = ftype.type.replace(/\\W/g, '');\n                    if (value.length > 0) {\n                        types.push(value); // unshift for backward compatibility\n                    }\n                }\n                debug(`ftyp: ${types.join('/')}`);\n                const x = types.filter(distinct).join('/');\n                this.metadata.setFormat('container', x);\n            },\n            /**\n             * Parse sample description atom\n             */\n            stsd: async (len) => {\n                const stsd = await this.tokenizer.readToken(new AtomToken.StsdAtom(len));\n                const trackDescription = this.getTrackDescription();\n                trackDescription.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));\n            },\n            /**\n             * Parse sample-sizes atom ('stsz')\n             */\n            stsz: async (len) => {\n                const stsz = await this.tokenizer.readToken(new AtomToken.StszAtom(len));\n                const td = this.getTrackDescription();\n                td.sampleSize = stsz.sampleSize;\n                td.sampleSizeTable = stsz.entries;\n            },\n            date: async (len) => {\n                const date = await this.tokenizer.readToken(new Token.StringType(len, 'utf-8'));\n                await this.addTag('date', date);\n            }\n        };\n    }\n    static read_BE_Integer(array, signed) {\n        const integerType = (signed ? 'INT' : 'UINT') + array.length * 8 + (array.length > 1 ? '_BE' : '');\n        const token = Token[integerType];\n        if (!token) {\n            throw new Mp4ContentError(`Token for integer type not found: \"${integerType}\"`);\n        }\n        return Number(token.get(array, 0));\n    }\n    async parse() {\n        this.hasVideoTrack = false;\n        this.hasAudioTrack = true;\n        this.tracks.clear();\n        let remainingFileSize = this.tokenizer.fileInfo.size || 0;\n        while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {\n            try {\n                const token = await this.tokenizer.peekToken(AtomToken.Header);\n                if (token.name === '\\0\\0\\0\\0') {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                    break;\n                }\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                }\n                else\n                    throw error;\n                break;\n            }\n            const rootAtom = await Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);\n            remainingFileSize -= rootAtom.header.length === BigInt(0) ? remainingFileSize : Number(rootAtom.header.length);\n        }\n        // Post process metadata\n        const formatList = [];\n        this.tracks.forEach(track => {\n            const trackFormats = [];\n            track.soundSampleDescription.forEach(ssd => {\n                const streamInfo = {};\n                const encoderInfo = encoderDict[ssd.dataFormat];\n                if (encoderInfo) {\n                    trackFormats.push(encoderInfo.format);\n                    streamInfo.codecName = encoderInfo.format;\n                }\n                else {\n                    streamInfo.codecName = `<${ssd.dataFormat}>`;\n                }\n                if (ssd.description) {\n                    const { description } = ssd;\n                    if (description.sampleRate > 0) {\n                        streamInfo.type = TrackType.audio;\n                        streamInfo.audio = {\n                            samplingFrequency: description.sampleRate,\n                            bitDepth: description.sampleSize,\n                            channels: description.numAudioChannels\n                        };\n                    }\n                }\n                this.metadata.addStreamInfo(streamInfo);\n            });\n            if (trackFormats.length >= 1) {\n                formatList.push(trackFormats.join('/'));\n            }\n        });\n        if (formatList.length > 0) {\n            this.metadata.setFormat('codec', formatList.filter(distinct).join('+'));\n        }\n        const audioTracks = [...this.tracks.values()].filter(track => {\n            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;\n        });\n        if (audioTracks.length >= 1) {\n            const audioTrack = audioTracks[0];\n            if (audioTrack.media.header && audioTrack.media.header.timeScale > 0) {\n                if (audioTrack.media.header.duration > 0) {\n                    debug('Using duration defined on audio track');\n                    const duration = audioTrack.media.header.duration / audioTrack.media.header.timeScale; // calculate duration in seconds\n                    this.metadata.setFormat('duration', duration);\n                }\n                else if (audioTrack.fragments.length > 0) {\n                    debug('Calculate duration defined in track fragments');\n                    let totalTimeUnits = 0;\n                    for (const fragment of audioTrack.fragments) {\n                        const defaultDuration = fragment.header.defaultSampleDuration;\n                        for (const sample of fragment.trackRun.samples) {\n                            const dur = sample.sampleDuration ?? defaultDuration;\n                            if (dur == null) {\n                                throw new Error(\"Missing sampleDuration and no default_sample_duration in tfhd\");\n                            }\n                            totalTimeUnits += dur;\n                        }\n                    }\n                    this.metadata.setFormat('duration', totalTimeUnits / audioTrack.media.header.timeScale);\n                }\n            }\n            const ssd = audioTrack.soundSampleDescription[0];\n            if (ssd.description && audioTrack.media.header) {\n                this.metadata.setFormat('sampleRate', ssd.description.sampleRate);\n                this.metadata.setFormat('bitsPerSample', ssd.description.sampleSize);\n                this.metadata.setFormat('numberOfChannels', ssd.description.numAudioChannels);\n                if (audioTrack.media.header.timeScale === 0 && audioTrack.timeToSampleTable.length > 0) {\n                    const totalSampleSize = audioTrack.timeToSampleTable\n                        .map(ttstEntry => ttstEntry.count * ttstEntry.duration)\n                        .reduce((total, sampleSize) => total + sampleSize);\n                    const duration = totalSampleSize / ssd.description.sampleRate;\n                    this.metadata.setFormat('duration', duration);\n                }\n            }\n            const encoderInfo = encoderDict[ssd.dataFormat];\n            if (encoderInfo) {\n                this.metadata.setFormat('lossless', !encoderInfo.lossy);\n            }\n            this.calculateBitRate();\n        }\n        this.metadata.setFormat('hasAudio', this.hasAudioTrack);\n        this.metadata.setFormat('hasVideo', this.hasVideoTrack);\n    }\n    async handleAtom(atom, remaining) {\n        if (atom.parent) {\n            switch (atom.parent.header.name) {\n                case 'ilst':\n                case '<id>':\n                    return this.parseMetadataItemData(atom);\n                case 'moov':\n                    switch (atom.header.name) {\n                        case 'trak':\n                            return this.parseTrackBox(atom);\n                    }\n                    break;\n                case 'moof':\n                    switch (atom.header.name) {\n                        case 'traf':\n                            return this.parseTrackFragmentBox(atom);\n                    }\n            }\n        }\n        // const payloadLength = atom.getPayloadLength(remaining);\n        if (this.atomParsers[atom.header.name]) {\n            return this.atomParsers[atom.header.name](remaining);\n        }\n        debug(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);\n        await this.tokenizer.ignore(remaining);\n    }\n    getTrackDescription() {\n        // ToDo: pick the right track, not the last track!!!!\n        const tracks = [...this.tracks.values()];\n        return tracks[tracks.length - 1];\n    }\n    calculateBitRate() {\n        if (this.audioLengthInBytes && this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', 8 * this.audioLengthInBytes / this.metadata.format.duration);\n        }\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(tagFormat, id, value);\n    }\n    addWarning(message) {\n        debug(`Warning: ${message}`);\n        this.metadata.addWarning(message);\n    }\n    /**\n     * Parse data of Meta-item-list-atom (item of 'ilst' atom)\n     * @param metaAtom\n     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n     */\n    parseMetadataItemData(metaAtom) {\n        let tagKey = metaAtom.header.name;\n        return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {\n            const payLoadLength = child.getPayloadLength(remaining);\n            switch (child.header.name) {\n                case 'data': // value atom\n                    return this.parseValueAtom(tagKey, child);\n                case 'name': // name atom (optional)\n                case 'mean':\n                case 'rate': {\n                    const name = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));\n                    tagKey += `:${name.name}`;\n                    break;\n                }\n                default: {\n                    const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(payLoadLength));\n                    this.addWarning(`Unsupported meta-item: ${tagKey}[${child.header.name}] => value=${uint8ArrayToHex(uint8Array)} ascii=${textDecode(uint8Array, 'ascii')}`);\n                }\n            }\n        }, metaAtom.getPayloadLength(0));\n    }\n    async parseValueAtom(tagKey, metaAtom) {\n        const dataAtom = await this.tokenizer.readToken(new AtomToken.DataAtom(Number(metaAtom.header.length) - AtomToken.Header.len));\n        if (dataAtom.type.set !== 0) {\n            throw new Mp4ContentError(`Unsupported type-set != 0: ${dataAtom.type.set}`);\n        }\n        // Use well-known-type table\n        // Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\n        switch (dataAtom.type.type) {\n            case 0: // reserved: Reserved for use where no type needs to be indicated\n                switch (tagKey) {\n                    case 'trkn':\n                    case 'disk': {\n                        const num = Token.UINT8.get(dataAtom.value, 3);\n                        const of = Token.UINT8.get(dataAtom.value, 5);\n                        // console.log(\"  %s[data] = %s/%s\", tagKey, num, of);\n                        await this.addTag(tagKey, `${num}/${of}`);\n                        break;\n                    }\n                    case 'gnre': {\n                        const genreInt = Token.UINT8.get(dataAtom.value, 1);\n                        const genreStr = Genres[genreInt - 1];\n                        // console.log(\"  %s[data] = %s\", tagKey, genreStr);\n                        await this.addTag(tagKey, genreStr);\n                        break;\n                    }\n                    case 'rate': {\n                        const rate = textDecode(dataAtom.value, 'ascii');\n                        await this.addTag(tagKey, rate);\n                        break;\n                    }\n                    default:\n                        debug(`unknown proprietary value type for: ${metaAtom.atomPath}`);\n                }\n                break;\n            case 1: // UTF-8: Without any count or NULL terminator\n            case 18: // Unknown: Found in m4b in combination with a '©gen' tag\n                await this.addTag(tagKey, textDecode(dataAtom.value));\n                break;\n            case 13: // JPEG\n                if (this.options.skipCovers)\n                    break;\n                await this.addTag(tagKey, {\n                    format: 'image/jpeg',\n                    data: Uint8Array.from(dataAtom.value)\n                });\n                break;\n            case 14: // PNG\n                if (this.options.skipCovers)\n                    break;\n                await this.addTag(tagKey, {\n                    format: 'image/png',\n                    data: Uint8Array.from(dataAtom.value)\n                });\n                break;\n            case 21: // BE Signed Integer\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, true));\n                break;\n            case 22: // BE Unsigned Integer\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, false));\n                break;\n            case 65: // An 8-bit signed integer\n                await this.addTag(tagKey, Token.UINT8.get(dataAtom.value, 0));\n                break;\n            case 66: // A big-endian 16-bit signed integer\n                await this.addTag(tagKey, Token.UINT16_BE.get(dataAtom.value, 0));\n                break;\n            case 67: // A big-endian 32-bit signed integer\n                await this.addTag(tagKey, Token.UINT32_BE.get(dataAtom.value, 0));\n                break;\n            default:\n                this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);\n        }\n    }\n    async parseTrackBox(trakBox) {\n        // @ts-expect-error\n        const track = {\n            media: {},\n            fragments: []\n        };\n        await trakBox.readAtoms(this.tokenizer, async (child, remaining) => {\n            const payLoadLength = child.getPayloadLength(remaining);\n            switch (child.header.name) {\n                case 'chap': {\n                    const chap = await this.tokenizer.readToken(new ChapterTrackReferenceBox(remaining));\n                    track.chapterList = chap;\n                    break;\n                }\n                case 'tkhd': // TrackHeaderBox\n                    track.header = await this.tokenizer.readToken(new AtomToken.TrackHeaderAtom(payLoadLength));\n                    break;\n                case 'hdlr': // TrackHeaderBox\n                    track.handler = await this.tokenizer.readToken(new AtomToken.HandlerBox(payLoadLength));\n                    switch (track.handler.handlerType) {\n                        case 'audi':\n                            debug('Contains audio track');\n                            this.hasAudioTrack = true;\n                            break;\n                        case 'vide':\n                            debug('Contains video track');\n                            this.hasVideoTrack = true;\n                            break;\n                    }\n                    break;\n                case 'mdhd': { // Parse media header (mdhd) box\n                    const mdhd_data = await this.tokenizer.readToken(new AtomToken.MdhdAtom(payLoadLength));\n                    track.media.header = mdhd_data;\n                    break;\n                }\n                case 'stco': {\n                    const stco = await this.tokenizer.readToken(new AtomToken.StcoAtom(payLoadLength));\n                    track.chunkOffsetTable = stco.entries; // remember chunk offsets\n                    break;\n                }\n                case 'stsc': { // sample-to-Chunk box\n                    const stsc = await this.tokenizer.readToken(new AtomToken.StscAtom(payLoadLength));\n                    track.sampleToChunkTable = stsc.entries;\n                    break;\n                }\n                case 'stsd': { // sample description box\n                    const stsd = await this.tokenizer.readToken(new AtomToken.StsdAtom(payLoadLength));\n                    track.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));\n                    break;\n                }\n                case 'stts': { // time-to-sample table\n                    const stts = await this.tokenizer.readToken(new AtomToken.SttsAtom(payLoadLength));\n                    track.timeToSampleTable = stts.entries;\n                    break;\n                }\n                case 'stsz': {\n                    const stsz = await this.tokenizer.readToken(new AtomToken.StszAtom(payLoadLength));\n                    track.sampleSize = stsz.sampleSize;\n                    track.sampleSizeTable = stsz.entries;\n                    break;\n                }\n                case 'dinf':\n                case 'vmhd':\n                case 'smhd':\n                    debug(`Ignoring: ${child.header.name}`);\n                    await this.tokenizer.ignore(payLoadLength);\n                    break;\n                default: {\n                    debug(`Unexpected track box: ${child.header.name}`);\n                    await this.tokenizer.ignore(payLoadLength);\n                }\n            }\n        }, trakBox.getPayloadLength(0));\n        // Register track\n        this.tracks.set(track.header.trackId, track);\n    }\n    parseTrackFragmentBox(trafBox) {\n        let tfhd;\n        return trafBox.readAtoms(this.tokenizer, async (child, remaining) => {\n            const payLoadLength = child.getPayloadLength(remaining);\n            switch (child.header.name) {\n                case 'tfhd': { // TrackFragmentHeaderBox\n                    const fragmentHeaderBox = new AtomToken.TrackFragmentHeaderBox(child.getPayloadLength(remaining));\n                    tfhd = await this.tokenizer.readToken(fragmentHeaderBox);\n                    break;\n                }\n                case 'tfdt': // TrackFragmentBaseMediaDecodeTimeBo\n                    await this.tokenizer.ignore(payLoadLength);\n                    break;\n                case 'trun': { // TrackRunBox\n                    const trackRunBox = new AtomToken.TrackRunBox(payLoadLength);\n                    const trun = await this.tokenizer.readToken(trackRunBox);\n                    if (tfhd) {\n                        const track = this.tracks.get(tfhd.trackId);\n                        track?.fragments.push({ header: tfhd, trackRun: trun });\n                    }\n                    break;\n                }\n                default: {\n                    debug(`Unexpected box: ${child.header.name}`);\n                    await this.tokenizer.ignore(payLoadLength);\n                }\n            }\n        }, trafBox.getPayloadLength(0));\n    }\n    /**\n     * @param sampleDescription\n     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916\n     */\n    parseSoundSampleDescription(sampleDescription) {\n        const ssd = {\n            dataFormat: sampleDescription.dataFormat,\n            dataReferenceIndex: sampleDescription.dataReferenceIndex\n        };\n        let offset = 0;\n        if (sampleDescription.description) {\n            const version = AtomToken.SoundSampleDescriptionVersion.get(sampleDescription.description, offset);\n            offset += AtomToken.SoundSampleDescriptionVersion.len;\n            if (version.version === 0 || version.version === 1) {\n                // Sound Sample Description (Version 0)\n                ssd.description = AtomToken.SoundSampleDescriptionV0.get(sampleDescription.description, offset);\n            }\n            else {\n                debug(`Warning: sound-sample-description ${version} not implemented`);\n            }\n        }\n        return ssd;\n    }\n    async parseChapterTrack(chapterTrack, track, len) {\n        if (!chapterTrack.sampleSize) {\n            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)\n                throw new Error('Expected equal chunk-offset-table & sample-size-table length.');\n        }\n        const chapters = [];\n        for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {\n            const start = chapterTrack.timeToSampleTable\n                .slice(0, i)\n                .reduce((acc, cur) => acc + cur.duration, 0);\n            const chunkOffset = chapterTrack.chunkOffsetTable[i];\n            const nextChunkLen = chunkOffset - this.tokenizer.position;\n            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];\n            len -= nextChunkLen + sampleSize;\n            if (len < 0)\n                throw new Mp4ContentError('Chapter chunk exceeding token length');\n            await this.tokenizer.ignore(nextChunkLen);\n            const title = await this.tokenizer.readToken(new AtomToken.ChapterText(sampleSize));\n            debug(`Chapter ${i + 1}: ${title}`);\n            const chapter = {\n                title,\n                timeScale: chapterTrack.media.header ? chapterTrack.media.header.timeScale : 0,\n                start,\n                sampleOffset: this.findSampleOffset(track, this.tokenizer.position)\n            };\n            debug(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${track.header.duration}`); // ToDo, use media duration if required!!!\n            chapters.push(chapter);\n        }\n        this.metadata.setFormat('chapters', chapters);\n        await this.tokenizer.ignore(len);\n    }\n    findSampleOffset(track, chapterOffset) {\n        let chunkIndex = 0;\n        while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {\n            ++chunkIndex;\n        }\n        return this.getChunkDuration(chunkIndex + 1, track);\n    }\n    getChunkDuration(chunkId, track) {\n        let ttsi = 0;\n        let ttsc = track.timeToSampleTable[ttsi].count;\n        let ttsd = track.timeToSampleTable[ttsi].duration;\n        let curChunkId = 1;\n        let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n        let totalDuration = 0;\n        while (curChunkId < chunkId) {\n            const nrOfSamples = Math.min(ttsc, samplesPerChunk);\n            totalDuration += nrOfSamples * ttsd;\n            ttsc -= nrOfSamples;\n            samplesPerChunk -= nrOfSamples;\n            if (samplesPerChunk === 0) {\n                ++curChunkId;\n                samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n            }\n            else {\n                ++ttsi;\n                ttsc = track.timeToSampleTable[ttsi].count;\n                ttsd = track.timeToSampleTable[ttsi].duration;\n            }\n        }\n        return totalDuration;\n    }\n    getSamplesPerChunk(chunkId, stcTable) {\n        for (let i = 0; i < stcTable.length - 1; ++i) {\n            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {\n                return stcTable[i].samplesPerChunk;\n            }\n        }\n        return stcTable[stcTable.length - 1].samplesPerChunk;\n    }\n}\n"],"names":["debug","initDebug","Mp4ContentError","makeUnexpectedFileContentError","Header","len","get","buf","off","length","Token","BigInt","name","put","hdr","Number","FourCcToken","ExtendedSize","ftyp","type","FixedLengthAtom","constructor","expLen","atomId","this","SecondsSinceMacEpoch","secondsSinceUnixEpoch","Date","MdhdAtom","super","version","flags","creationTime","modificationTime","timeScale","duration","language","quality","MvhdAtom","preferredRate","preferredVolume","previewTime","previewDuration","posterTime","selectionTime","selectionDuration","currentTime","nextTrackID","DataAtom","set","locale","value","NameAtom","TrackHeaderAtom","trackId","layer","alternateGroup","volume","stsdHeader","numberOfEntries","SampleDescriptionTable","descrLen","dataFormat","dataReferenceIndex","description","undefined","StsdAtom","header","table","n","size","push","SoundSampleDescriptionVersion","revision","vendor","SoundSampleDescriptionV0","numAudioChannels","sampleSize","compressionId","packetSize","sampleRate","SimpleTableAtom","token","nrOfEntries","entries","readTokenTable","TimeToSampleToken","count","SttsAtom","SampleToChunkToken","firstChunk","samplesPerChunk","sampleDescriptionId","StscAtom","StszAtom","StcoAtom","ChapterText","titleLen","str","remainingLen","TrackFragmentHeaderBox","flagOffset","baseDataOffsetPresent","util","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","defaultDurationIsEmpty","defaultBaseIsMoof","dynOffset","baseDataOffset","sampleDescriptionIndex","defaultSampleDuration","defaultSampleSize","defaultSampleFlags","TrackRunBox","trun","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetsPresent","sampleCount","samples","dataOffset","firstSampleFlags","sample","sampleDuration","sampleFlags","sampleCompositionTimeOffset","HandlerBox","charTypeToken","componentType","handlerType","componentName","ChapterTrackReferenceBox","trackIds","Atom","readAtom","tokenizer","dataHandler","parent","remaining","offset","position","readToken","AtomToken","extended","atomBean","payloadLength","getPayloadLength","atomPath","readData","children","getHeaderLength","readAtoms","peekHeader","peekToken","paddingLength","ignore","tagFormat","encoderDict","raw","lossy","format","MAC3","MAC6","ima4","ulaw","alaw","Qclp","alac","mp4a","mp4s","c608","c708","distinct","index","self","indexOf","MP4Parser","BasicParser","arguments","tracks","Map","hasVideoTrack","hasAudioTrack","atomParsers","mvhd","async","metadata","setFormat","chap","td","getTrackDescription","readNumber","chapterList","mdat","audioLengthInBytes","calculateBitRate","options","includeChapters","trackWithChapters","values","filter","track","chapterTrackIds","chapterTracks","parseChapterTrack","types","ftype","replace","join","x","stsd","trackDescription","soundSampleDescription","map","dfEntry","parseSoundSampleDescription","stsz","sampleSizeTable","date","addTag","read_BE_Integer","array","signed","integerType","parse","clear","remainingFileSize","fileInfo","errMsg","addWarning","error","Error","message","rootAtom","atom","handleAtom","formatList","forEach","trackFormats","ssd","streamInfo","encoderInfo","codecName","TrackType","audio","samplingFrequency","bitDepth","channels","addStreamInfo","audioTracks","audioTrack","media","fragments","totalTimeUnits","fragment","defaultDuration","trackRun","dur","timeToSampleTable","totalSampleSize","ttstEntry","reduce","total","parseMetadataItemData","parseTrackBox","parseTrackFragmentBox","id","metaAtom","tagKey","child","payLoadLength","parseValueAtom","uint8Array","uint8ArrayToHex","textDecode","dataAtom","num","of","genreInt","genreStr","Genres","rate","skipCovers","data","Uint8Array","from","trakBox","handler","mdhd_data","stco","chunkOffsetTable","stsc","sampleToChunkTable","stts","trafBox","tfhd","fragmentHeaderBox","trackRunBox","sampleDescription","chapterTrack","chapters","i","start","slice","acc","cur","chunkOffset","nextChunkLen","title","chapter","sampleOffset","findSampleOffset","chapterOffset","chunkIndex","getChunkDuration","chunkId","ttsi","ttsc","ttsd","curChunkId","getSamplesPerChunk","totalDuration","nrOfSamples","Math","min","stcTable"],"sourceRoot":""}