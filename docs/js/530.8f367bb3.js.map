{"version":3,"file":"js/530.8f367bb3.js","mappings":"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","sources":["webpack://kwplayer/./node_modules/music-metadata/lib/ogg/opus/Opus.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/opus/OpusStream.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/speex/Speex.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/speex/SpeexStream.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/theora/Theora.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/theora/TheoraStream.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/OggToken.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/flac/FlacStream.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/OggParser.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/vorbis/VorbisStream.js","webpack://kwplayer/./node_modules/music-metadata/lib/flac/FlacParser.js","webpack://kwplayer/./node_modules/music-metadata/lib/flac/FlacToken.js","webpack://kwplayer/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js","webpack://kwplayer/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nexport class OpusContentError extends makeUnexpectedFileContentError('Opus') {\n}\n/**\n * Opus ID Header parser\n * Ref: https://wiki.xiph.org/OggOpus#ID_Header\n */\nexport class IdHeader {\n    constructor(len) {\n        if (len < 19) {\n            throw new OpusContentError('ID-header-page 0 should be at least 19 bytes long');\n        }\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            magicSignature: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: Token.UINT8.get(buf, off + 8),\n            channelCount: Token.UINT8.get(buf, off + 9),\n            preSkip: Token.UINT16_LE.get(buf, off + 10),\n            inputSampleRate: Token.UINT32_LE.get(buf, off + 12),\n            outputGain: Token.UINT16_LE.get(buf, off + 16),\n            channelMapping: Token.UINT8.get(buf, off + 18)\n        };\n    }\n}\n","import * as Token from 'token-types';\nimport { VorbisStream } from '../vorbis/VorbisStream.js';\nimport * as Opus from './Opus.js';\nimport { OpusContentError } from './Opus.js';\n/**\n * Opus parser\n * Internet Engineering Task Force (IETF) - RFC 6716\n * Used by OggStream\n */\nexport class OpusStream extends VorbisStream {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.idHeader = null;\n        this.lastPos = -1;\n        this.tokenizer = tokenizer;\n        this.durationOnLastPage = true;\n    }\n    /**\n     * Parse first Opus Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(_header, pageData) {\n        this.metadata.setFormat('codec', 'Opus');\n        // Parse Opus ID Header\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\n        if (this.idHeader.magicSignature !== \"OpusHead\")\n            throw new OpusContentError(\"Illegal ogg/Opus magic-signature\");\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\n        this.metadata.setAudioOnly();\n    }\n    async parseFullPage(pageData) {\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\n        switch (magicSignature) {\n            case 'OpusTags':\n                await this.parseUserCommentList(pageData, 8);\n                this.lastPos = this.tokenizer.position - pageData.length;\n                break;\n            default:\n                break;\n        }\n    }\n    calculateDuration() {\n        if (this.lastPageHeader && this.metadata.format.sampleRate && this.lastPageHeader.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            const pos_48bit = this.lastPageHeader.absoluteGranulePosition - this.idHeader.preSkip;\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\n            this.metadata.setFormat('duration', pos_48bit / 48000);\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n            }\n        }\n    }\n}\n","import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\n/**\n * Speex Header Packet\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\n */\nexport const Header = {\n    len: 80,\n    get: (buf, off) => {\n        return {\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: util.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\n            version_id: Token.INT32_LE.get(buf, off + 28),\n            header_size: Token.INT32_LE.get(buf, off + 32),\n            rate: Token.INT32_LE.get(buf, off + 36),\n            mode: Token.INT32_LE.get(buf, off + 40),\n            mode_bitstream_version: Token.INT32_LE.get(buf, off + 44),\n            nb_channels: Token.INT32_LE.get(buf, off + 48),\n            bitrate: Token.INT32_LE.get(buf, off + 52),\n            frame_size: Token.INT32_LE.get(buf, off + 56),\n            vbr: Token.INT32_LE.get(buf, off + 60),\n            frames_per_packet: Token.INT32_LE.get(buf, off + 64),\n            extra_headers: Token.INT32_LE.get(buf, off + 68),\n            reserved1: Token.INT32_LE.get(buf, off + 72),\n            reserved2: Token.INT32_LE.get(buf, off + 76)\n        };\n    }\n};\n","import initDebug from 'debug';\nimport { VorbisStream } from '../vorbis/VorbisStream.js';\nimport * as Speex from './Speex.js';\nconst debug = initDebug('music-metadata:parser:ogg:speex');\n/**\n * Speex, RFC 5574\n * Ref:\n * - https://www.speex.org/docs/manual/speex-manual/\n * - https://tools.ietf.org/html/rfc5574\n */\nexport class SpeexStream extends VorbisStream {\n    constructor(metadata, options, _tokenizer) {\n        super(metadata, options);\n    }\n    /**\n     * Parse first Speex Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(_header, pageData) {\n        debug('First Ogg/Speex page');\n        const speexHeader = Speex.Header.get(pageData, 0);\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\n        if (speexHeader.bitrate !== -1) {\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\n        }\n        this.metadata.setAudioOnly();\n    }\n}\n","import * as Token from 'token-types';\n/**\n * 6.2 Identification Header\n * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode\n */\nexport const IdentificationHeader = {\n    len: 42,\n    get: (buf, off) => {\n        return {\n            id: new Token.StringType(7, 'ascii').get(buf, off),\n            vmaj: Token.UINT8.get(buf, off + 7),\n            vmin: Token.UINT8.get(buf, off + 8),\n            vrev: Token.UINT8.get(buf, off + 9),\n            vmbw: Token.UINT16_BE.get(buf, off + 10),\n            vmbh: Token.UINT16_BE.get(buf, off + 17),\n            nombr: Token.UINT24_BE.get(buf, off + 37),\n            nqual: Token.UINT8.get(buf, off + 40)\n        };\n    }\n};\n","import initDebug from 'debug';\nimport { IdentificationHeader } from './Theora.js';\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://theora.org/doc/Theora.pdf\n */\nexport class TheoraStream {\n    constructor(metadata, _options, _tokenizer) {\n        this.durationOnLastPage = false;\n        this.metadata = metadata;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            await this.parseFirstPage(header, pageData);\n        }\n    }\n    calculateDuration() {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     */\n    async parseFirstPage(_header, pageData) {\n        debug('First Ogg/Theora page');\n        this.metadata.setFormat('codec', 'Theora');\n        const idHeader = IdentificationHeader.get(pageData, 0);\n        this.metadata.setFormat('bitrate', idHeader.nombr);\n        this.metadata.setFormat('hasVideo', true);\n    }\n    flush() {\n        return Promise.resolve();\n    }\n}\n","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { StringType } from 'token-types';\nexport const PageHeader = {\n    len: 27,\n    get: (buf, off) => {\n        return {\n            capturePattern: new StringType(4, 'latin1').get(buf, off),\n            version: Token.UINT8.get(buf, off + 4),\n            headerType: {\n                continued: util.getBit(buf, off + 5, 0),\n                firstPage: util.getBit(buf, off + 5, 1),\n                lastPage: util.getBit(buf, off + 5, 2)\n            },\n            // packet_flag: Token.UINT8.get(buf, off + 5),\n            absoluteGranulePosition: Number(Token.UINT64_LE.get(buf, off + 6)),\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\n            page_segments: Token.UINT8.get(buf, off + 26)\n        };\n    }\n};\nexport class SegmentTable {\n    static sum(buf, off, len) {\n        const dv = new DataView(buf.buffer, 0);\n        let s = 0;\n        for (let i = off; i < off + len; ++i) {\n            s += dv.getUint8(i);\n        }\n        return s;\n    }\n    constructor(header) {\n        this.len = header.page_segments;\n    }\n    get(buf, off) {\n        return {\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\n        };\n    }\n}\n","import initDebug from 'debug';\nimport * as Flac from '../../flac/FlacToken.js';\nimport { FlacParser } from '../../flac/FlacParser.js';\nimport { FourCcToken } from '../../common/FourCC.js';\nimport { VorbisPictureToken } from '../vorbis/Vorbis.js';\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://xiph.org/flac/ogg_mapping.html\n */\nexport class FlacStream {\n    constructor(metadata, options, tokenizer) {\n        this.durationOnLastPage = false;\n        this.metadata = metadata;\n        this.options = options;\n        this.tokenizer = tokenizer;\n        this.flacParser = new FlacParser(this.metadata, this.tokenizer, options);\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            await this.parseFirstPage(header, pageData);\n        }\n    }\n    calculateDuration() {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     */\n    async parseFirstPage(_header, pageData) {\n        debug('First Ogg/FLAC page');\n        const fourCC = await FourCcToken.get(pageData, 9);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new Error('Invalid FLAC preamble');\n        }\n        const blockHeader = await Flac.BlockHeader.get(pageData, 13);\n        await this.parseDataBlock(blockHeader, pageData.subarray(13 + Flac.BlockHeader.len));\n    }\n    async parseDataBlock(blockHeader, pageData) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case Flac.BlockType.STREAMINFO: {\n                const streamInfo = Flac.BlockStreamInfo.get(pageData, 0);\n                return this.flacParser.processsStreamInfo(streamInfo);\n            }\n            case Flac.BlockType.PADDING:\n                break;\n            case Flac.BlockType.APPLICATION:\n                break;\n            case Flac.BlockType.SEEKTABLE:\n                break;\n            case Flac.BlockType.VORBIS_COMMENT:\n                return this.flacParser.parseComment(pageData);\n            case Flac.BlockType.PICTURE:\n                if (!this.options.skipCovers) {\n                    const picture = new VorbisPictureToken(pageData.length).get(pageData, 0);\n                    return this.flacParser.addPictureTag(picture);\n                }\n                break;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    flush() {\n        return Promise.resolve();\n    }\n}\n","import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { VorbisStream } from './vorbis/VorbisStream.js';\nimport { OpusStream } from './opus/OpusStream.js';\nimport { SpeexStream } from './speex/SpeexStream.js';\nimport { TheoraStream } from './theora/TheoraStream.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport { PageHeader, SegmentTable } from './OggToken.js';\nimport { FlacStream } from './flac/FlacStream.js';\nexport class OggContentError extends makeUnexpectedFileContentError('Ogg') {\n}\nconst debug = initDebug('music-metadata:parser:ogg');\nclass OggStream {\n    constructor(metadata, streamSerial, options) {\n        this.pageNumber = 0;\n        this.closed = false;\n        this.metadata = metadata;\n        this.streamSerial = streamSerial;\n        this.options = options;\n    }\n    async parsePage(tokenizer, header) {\n        this.pageNumber = header.pageSequenceNo;\n        debug('serial=%s page#=%s, Ogg.id=%s', header.streamSerialNumber, header.pageSequenceNo, header.capturePattern);\n        const segmentTable = await tokenizer.readToken(new SegmentTable(header));\n        debug('totalPageSize=%s', segmentTable.totalPageSize);\n        const pageData = await tokenizer.readToken(new Token.Uint8ArrayType(segmentTable.totalPageSize));\n        debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\n        if (header.headerType.firstPage) {\n            this.metadata.setFormat('container', 'Ogg');\n            const idData = pageData.subarray(0, 7); // Copy this portion\n            const asciiId = Array.from(idData)\n                .filter(b => b >= 32 && b <= 126) // Keep only printable ASCII\n                .map(b => String.fromCharCode(b))\n                .join('');\n            switch (asciiId) {\n                case 'vorbis': // Ogg/Vorbis\n                    debug(`Set Ogg stream serial ${header.streamSerialNumber}, codec=Vorbis`);\n                    this.pageConsumer = new VorbisStream(this.metadata, this.options);\n                    break;\n                case 'OpusHea': // Ogg/Opus\n                    debug('Set page consumer to Ogg/Opus');\n                    this.pageConsumer = new OpusStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'Speex  ': // Ogg/Speex\n                    debug('Set page consumer to Ogg/Speex');\n                    this.pageConsumer = new SpeexStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'fishead':\n                case 'theora': // Ogg/Theora\n                    debug('Set page consumer to Ogg/Theora');\n                    this.pageConsumer = new TheoraStream(this.metadata, this.options, tokenizer);\n                    break;\n                case 'FLAC': // Ogg/Theora\n                    debug('Set page consumer to Vorbis');\n                    this.pageConsumer = new FlacStream(this.metadata, this.options, tokenizer);\n                    break;\n                default:\n                    throw new OggContentError(`Ogg codec not recognized (id=${asciiId}`);\n            }\n        }\n        if (header.headerType.lastPage) {\n            this.closed = true;\n        }\n        if (this.pageConsumer) {\n            await this.pageConsumer.parsePage(header, pageData);\n        }\n        else\n            throw new Error('pageConsumer should be initialized');\n    }\n}\n/**\n * Parser for Ogg logical bitstream framing\n */\nexport class OggParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.streams = new Map();\n    }\n    /**\n     * Parse page\n     * @returns {Promise<void>}\n     */\n    async parse() {\n        this.streams = new Map();\n        let header;\n        try {\n            do {\n                header = await this.tokenizer.readToken(PageHeader);\n                if (header.capturePattern !== 'OggS')\n                    throw new OggContentError('Invalid Ogg capture pattern');\n                let stream = this.streams.get(header.streamSerialNumber);\n                if (!stream) {\n                    stream = new OggStream(this.metadata, header.streamSerialNumber, this.options);\n                    this.streams.set(header.streamSerialNumber, stream);\n                }\n                await stream.parsePage(this.tokenizer, header);\n                if (stream.pageNumber > 12 && !(this.options.duration && [...this.streams.values()].find(stream => stream.pageConsumer?.durationOnLastPage))) {\n                    debug(\"Stop processing Ogg stream\");\n                    break;\n                }\n            } while (![...this.streams.values()].every(item => item.closed));\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"Reached end-of-stream\");\n            }\n            else if (err instanceof OggContentError) {\n                this.metadata.addWarning(`Corrupt Ogg content at ${this.tokenizer.position}`);\n            }\n            else\n                throw err;\n        }\n        for (const stream of this.streams.values()) {\n            if (!stream.closed) {\n                this.metadata.addWarning(`End-of-stream reached before reaching last page in Ogg stream serial=${stream.streamSerial}`);\n                await stream.pageConsumer?.flush();\n            }\n            stream.pageConsumer?.calculateDuration();\n        }\n    }\n}\n","import * as Token from 'token-types';\nimport { AttachedPictureType } from '../../id3v2/ID3v2Token.js';\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nexport class VorbisPictureToken {\n    static fromBase64(base64str) {\n        return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), c => c.charCodeAt(0)));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        offset += 4;\n        const mimeLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const format = new Token.StringType(mimeLen, 'utf-8').get(buffer, offset);\n        offset += mimeLen;\n        const descLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const description = new Token.StringType(descLen, 'utf-8').get(buffer, offset);\n        offset += descLen;\n        const width = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const height = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const colour_depth = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const indexed_color = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const picDataLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const data = buffer.slice(offset, offset + picDataLen);\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexport const CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: Token.UINT8.get(buf, off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexport const IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        return {\n            version: Token.UINT32_LE.get(uint8Array, off + 0),\n            channelMode: Token.UINT8.get(uint8Array, off + 4),\n            sampleRate: Token.UINT32_LE.get(uint8Array, off + 5),\n            bitrateMax: Token.UINT32_LE.get(uint8Array, off + 9),\n            bitrateNominal: Token.UINT32_LE.get(uint8Array, off + 13),\n            bitrateMin: Token.UINT32_LE.get(uint8Array, off + 17)\n        };\n    }\n};\n","import * as Token from 'token-types';\nimport debugInit from 'debug';\nimport { VorbisDecoder } from './VorbisDecoder.js';\nimport { CommonHeader, IdentificationHeader, VorbisPictureToken } from './Vorbis.js';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nconst debug = debugInit('music-metadata:parser:ogg:vorbis1');\nexport class VorbisContentError extends makeUnexpectedFileContentError('Vorbis') {\n}\n/**\n * Vorbis 1 Parser.\n * Used by OggStream\n */\nexport class VorbisStream {\n    constructor(metadata, options) {\n        this.pageSegments = [];\n        this.durationOnLastPage = true;\n        this.metadata = metadata;\n        this.options = options;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        this.lastPageHeader = header;\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n        else {\n            if (header.headerType.continued) {\n                if (this.pageSegments.length === 0) {\n                    throw new VorbisContentError('Cannot continue on previous page');\n                }\n                this.pageSegments.push(pageData);\n            }\n            if (header.headerType.lastPage || !header.headerType.continued) {\n                // Flush page segments\n                if (this.pageSegments.length > 0) {\n                    const fullPage = VorbisStream.mergeUint8Arrays(this.pageSegments);\n                    await this.parseFullPage(fullPage);\n                }\n                // Reset page segments\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\n            }\n        }\n    }\n    static mergeUint8Arrays(arrays) {\n        const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);\n        const merged = new Uint8Array(totalSize);\n        arrays.forEach((array, i, _arrays) => {\n            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);\n            merged.set(array, offset);\n        });\n        return merged;\n    }\n    async flush() {\n        await this.parseFullPage(VorbisStream.mergeUint8Arrays(this.pageSegments));\n    }\n    async parseUserComment(pageData, offset) {\n        const decoder = new VorbisDecoder(pageData, offset);\n        const tag = decoder.parseUserComment();\n        await this.addTag(tag.key, tag.value);\n        return tag.len;\n    }\n    async addTag(id, value) {\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\n            if (this.options.skipCovers) {\n                debug(\"Ignore picture\");\n                return;\n            }\n            value = VorbisPictureToken.fromBase64(value);\n            debug(`Push picture: id=${id}, format=${value.format}`);\n        }\n        else {\n            debug(`Push tag: id=${id}, value=${value}`);\n        }\n        await this.metadata.addTag('vorbis', id, value);\n    }\n    calculateDuration() {\n        if (this.lastPageHeader && this.metadata.format.sampleRate && this.lastPageHeader.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            this.metadata.setFormat('numberOfSamples', this.lastPageHeader.absoluteGranulePosition);\n            this.metadata.setFormat('duration', this.lastPageHeader.absoluteGranulePosition / this.metadata.format.sampleRate);\n        }\n    }\n    /**\n     * Parse first Ogg/Vorbis page\n     * @param _header\n     * @param pageData\n     */\n    parseFirstPage(_header, pageData) {\n        this.metadata.setFormat('codec', 'Vorbis I');\n        this.metadata.setFormat('hasAudio', true);\n        debug('Parse first page');\n        // Parse  Vorbis common header\n        const commonHeader = CommonHeader.get(pageData, 0);\n        if (commonHeader.vorbis !== 'vorbis')\n            throw new VorbisContentError('Metadata does not look like Vorbis');\n        if (commonHeader.packetType === 1) {\n            const idHeader = IdentificationHeader.get(pageData, CommonHeader.len);\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\n            debug('sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s', idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\n        }\n        else\n            throw new VorbisContentError('First Ogg page should be type 1: the identification header');\n    }\n    async parseFullPage(pageData) {\n        // New page\n        const commonHeader = CommonHeader.get(pageData, 0);\n        debug('Parse full page: type=%s, byteLength=%s', commonHeader.packetType, pageData.byteLength);\n        switch (commonHeader.packetType) {\n            case 3: //  type 3: comment header\n                return this.parseUserCommentList(pageData, CommonHeader.len);\n            case 1: // type 1: the identification header\n            case 5: // type 5: setup header type\n                break; // ignore\n        }\n    }\n    /**\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n     */\n    async parseUserCommentList(pageData, offset) {\n        const strLen = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\n        offset += strLen;\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        while (userCommentListLength-- > 0) {\n            offset += (await this.parseUserComment(pageData, offset));\n        }\n    }\n}\n","import initDebug from 'debug';\nimport { Uint8ArrayType } from 'token-types';\nimport { VorbisPictureToken } from '../ogg/vorbis/Vorbis.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { VorbisStream } from '../ogg/vorbis/VorbisStream.js';\nimport { VorbisDecoder } from '../ogg/vorbis/VorbisDecoder.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport * as Flac from './FlacToken.js';\nconst debug = initDebug('music-metadata:parser:FLAC');\nclass FlacContentError extends makeUnexpectedFileContentError('FLAC') {\n}\nexport class FlacParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.vorbisParser = new VorbisStream(this.metadata, this.options);\n        this.padding = 0;\n    }\n    async postId3v2Parse() {\n        const fourCC = await this.tokenizer.readToken(FourCcToken);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new FlacContentError('Invalid FLAC preamble');\n        }\n        let blockHeader;\n        do {\n            // Read block header\n            blockHeader = await this.tokenizer.readToken(Flac.BlockHeader);\n            // Parse block data\n            await this.parseDataBlock(blockHeader);\n        } while (!blockHeader.lastBlock);\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n        }\n    }\n    async parseDataBlock(blockHeader) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case Flac.BlockType.STREAMINFO:\n                return this.readBlockStreamInfo(blockHeader.length);\n            case Flac.BlockType.PADDING:\n                this.padding += blockHeader.length;\n                break;\n            case Flac.BlockType.APPLICATION:\n                break;\n            case Flac.BlockType.SEEKTABLE:\n                break;\n            case Flac.BlockType.VORBIS_COMMENT:\n                return this.readComment(blockHeader.length);\n            case Flac.BlockType.CUESHEET:\n                break;\n            case Flac.BlockType.PICTURE:\n                await this.parsePicture(blockHeader.length);\n                return;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    async readBlockStreamInfo(dataLen) {\n        if (dataLen !== Flac.BlockStreamInfo.len)\n            throw new FlacContentError('Unexpected block-stream-info length');\n        const streamInfo = await this.tokenizer.readToken(Flac.BlockStreamInfo);\n        this.metadata.setFormat('container', 'FLAC');\n        this.processsStreamInfo(streamInfo);\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    processsStreamInfo(streamInfo) {\n        this.metadata.setFormat('codec', 'FLAC');\n        this.metadata.setFormat('hasAudio', true);\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\n        if (streamInfo.totalSamples > 0) {\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\n        }\n    }\n    /**\n     * Read VORBIS_COMMENT from tokenizer\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async readComment(dataLen) {\n        const data = await this.tokenizer.readToken(new Uint8ArrayType(dataLen));\n        return this.parseComment(data);\n    }\n    /**\n     * Parse VORBIS_COMMENT\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async parseComment(data) {\n        const decoder = new VorbisDecoder(data, 0);\n        const vendor = decoder.readStringUtf8();\n        if (vendor.length > 0) {\n            this.metadata.setFormat('tool', vendor);\n        }\n        const commentListLength = decoder.readInt32();\n        const tags = new Array(commentListLength);\n        for (let i = 0; i < commentListLength; i++) {\n            tags[i] = decoder.parseUserComment();\n        }\n        await Promise.all(tags.map(tag => {\n            if (tag.key === 'ENCODER') {\n                this.metadata.setFormat('tool', tag.value);\n            }\n            return this.addTag(tag.key, tag.value);\n        }));\n    }\n    async parsePicture(dataLen) {\n        if (this.options.skipCovers) {\n            return this.tokenizer.ignore(dataLen);\n        }\n        return this.addPictureTag(await this.tokenizer.readToken(new VorbisPictureToken(dataLen)));\n    }\n    addPictureTag(picture) {\n        return this.addTag('METADATA_BLOCK_PICTURE', picture);\n    }\n    addTag(id, value) {\n        return this.vorbisParser.addTag(id, value);\n    }\n}\n","import * as util from '../common/Util.js';\nimport { UINT16_BE, UINT24_BE, Uint8ArrayType } from 'token-types';\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nexport const BlockType = {\n    STREAMINFO: 0, // STREAMINFO\n    PADDING: 1, // PADDING\n    APPLICATION: 2, // APPLICATION\n    SEEKTABLE: 3, // SEEKTABLE\n    VORBIS_COMMENT: 4, // VORBIS_COMMENT\n    CUESHEET: 5, // CUESHEET\n    PICTURE: 6 // PICTURE\n};\nexport const BlockHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            lastBlock: util.getBit(buf, off, 7),\n            type: util.getBitAllignedNumber(buf, off, 1, 7),\n            length: UINT24_BE.get(buf, off + 1)\n        };\n    }\n};\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\nexport const BlockStreamInfo = {\n    len: 34,\n    get: (buf, off) => {\n        return {\n            // The minimum block size (in samples) used in the stream.\n            minimumBlockSize: UINT16_BE.get(buf, off),\n            // The maximum block size (in samples) used in the stream.\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n            maximumBlockSize: UINT16_BE.get(buf, off + 2) / 1000,\n            // The minimum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            minimumFrameSize: UINT24_BE.get(buf, off + 4),\n            // The maximum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            maximumFrameSize: UINT24_BE.get(buf, off + 7),\n            // Sample rate in Hz. Though 20 bits are available,\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n            // Also, a value of 0 is invalid.\n            sampleRate: UINT24_BE.get(buf, off + 10) >> 4,\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\n            channels: util.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n            // bits per sample)-1.\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n            bitsPerSample: util.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n            // Total samples in stream.\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n            // A value of zero here means the number of total samples is unknown.\n            totalSamples: util.getBitAllignedNumber(buf, off + 13, 4, 36),\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n            fileMD5: new Uint8ArrayType(16).get(buf, off + 18)\n        };\n    }\n};\n","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n","import * as Token from 'token-types';\nimport { textDecode } from '@borewit/text-codec';\nexport class VorbisDecoder {\n    constructor(data, offset) {\n        this.data = data;\n        this.offset = offset;\n    }\n    readInt32() {\n        const value = Token.UINT32_LE.get(this.data, this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readStringUtf8() {\n        const len = this.readInt32();\n        const value = textDecode(this.data.subarray(this.offset, this.offset + len), 'utf-8');\n        this.offset += len;\n        return value;\n    }\n    parseUserComment() {\n        const offset0 = this.offset;\n        const v = this.readStringUtf8();\n        const idx = v.indexOf('=');\n        return {\n            key: v.substring(0, idx).toUpperCase(),\n            value: v.substring(idx + 1),\n            len: this.offset - offset0\n        };\n    }\n}\n"],"names":["OpusContentError","makeUnexpectedFileContentError","IdHeader","constructor","len","this","get","buf","off","magicSignature","Token","version","channelCount","preSkip","inputSampleRate","outputGain","channelMapping","OpusStream","VorbisStream","metadata","options","tokenizer","super","idHeader","lastPos","durationOnLastPage","parseFirstPage","_header","pageData","setFormat","Opus","length","setAudioOnly","parseFullPage","parseUserCommentList","position","calculateDuration","lastPageHeader","format","sampleRate","absoluteGranulePosition","pos_48bit","fileInfo","size","duration","dataSize","Header","speex","util","version_id","header_size","rate","mode","mode_bitstream_version","nb_channels","bitrate","frame_size","vbr","frames_per_packet","extra_headers","reserved1","reserved2","debug","initDebug","SpeexStream","_tokenizer","speexHeader","Speex","IdentificationHeader","id","vmaj","vmin","vrev","vmbw","vmbh","nombr","nqual","TheoraStream","_options","parsePage","header","headerType","firstPage","flush","Promise","resolve","PageHeader","capturePattern","StringType","continued","lastPage","Number","streamSerialNumber","pageSequenceNo","pageChecksum","page_segments","SegmentTable","sum","dv","DataView","buffer","s","i","getUint8","totalPageSize","FlacStream","flacParser","FlacParser","fourCC","FourCcToken","toString","Error","blockHeader","Flac","parseDataBlock","subarray","type","STREAMINFO","streamInfo","processsStreamInfo","PADDING","APPLICATION","SEEKTABLE","VORBIS_COMMENT","parseComment","PICTURE","skipCovers","picture","VorbisPictureToken","addPictureTag","addWarning","ignore","then","OggContentError","OggStream","streamSerial","pageNumber","closed","segmentTable","readToken","idData","asciiId","Array","from","filter","b","map","String","fromCharCode","join","pageConsumer","OggParser","BasicParser","arguments","streams","Map","parse","stream","set","values","find","every","item","err","EndOfStreamError","fromBase64","base64str","fromBuffer","Uint8Array","atob","c","charCodeAt","pic","offset","AttachedPictureType","mimeLen","descLen","description","width","height","colour_depth","indexed_color","picDataLen","data","slice","CommonHeader","packetType","vorbis","uint8Array","channelMode","bitrateMax","bitrateNominal","bitrateMin","debugInit","VorbisContentError","pageSegments","push","fullPage","mergeUint8Arrays","arrays","totalSize","reduce","acc","e","merged","forEach","array","_arrays","parseUserComment","decoder","VorbisDecoder","tag","addTag","key","value","commonHeader","byteLength","strLen","userCommentListLength","FlacContentError","AbstractID3Parser","vorbisParser","padding","postId3v2Parse","lastBlock","readBlockStreamInfo","readComment","CUESHEET","parsePicture","dataLen","channels","bitsPerSample","totalSamples","Uint8ArrayType","vendor","readStringUtf8","commentListLength","readInt32","tags","all","BlockType","BlockHeader","UINT24_BE","BlockStreamInfo","minimumBlockSize","UINT16_BE","maximumBlockSize","minimumFrameSize","maximumFrameSize","fileMD5","id3parser","ID3v2Parser","startsWithID3v2Header","peekToken","ID3v2Header","fileIdentifier","parseID3v2","finalize","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser","ID3v1Parser","id3Header","textDecode","offset0","v","idx","indexOf","substring","toUpperCase"],"sourceRoot":""}