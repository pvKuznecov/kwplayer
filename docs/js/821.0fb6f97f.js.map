{"version":3,"file":"js/821.0fb6f97f.js","mappings":"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","sources":["webpack://kwplayer/./node_modules/music-metadata/lib/wavpack/WavPackToken.js","webpack://kwplayer/./node_modules/music-metadata/lib/wavpack/WavPackParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\nconst SampleRates = [6000, 8000, 9600, 11025, 12000, 16000, 22050, 24000, 32000, 44100,\n    48000, 64000, 88200, 96000, 192000, -1];\n/**\n * WavPack Block Header\n *\n * 32-byte little-endian header at the front of every WavPack block\n *\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 2/6: 2.0 \"Block Header\")\n */\nexport const BlockHeaderToken = {\n    len: 32,\n    get: (buf, off) => {\n        const flags = Token.UINT32_LE.get(buf, off + 24);\n        const res = {\n            // should equal 'wvpk'\n            BlockID: FourCcToken.get(buf, off),\n            //  0x402 to 0x410 are valid for decode\n            blockSize: Token.UINT32_LE.get(buf, off + 4),\n            //  0x402 (1026) to 0x410 are valid for decode\n            version: Token.UINT16_LE.get(buf, off + 8),\n            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            totalSamples: /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */ Token.UINT32_LE.get(buf, off + 12),\n            // 40-bit block_index\n            blockIndex: /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */ Token.UINT32_LE.get(buf, off + 16),\n            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            blockSamples: Token.UINT32_LE.get(buf, off + 20),\n            // various flags for id and decoding\n            flags: {\n                bitsPerSample: (1 + getBitAllignedNumber(flags, 0, 2)) * 8,\n                isMono: isBitSet(flags, 2),\n                isHybrid: isBitSet(flags, 3),\n                isJointStereo: isBitSet(flags, 4),\n                crossChannel: isBitSet(flags, 5),\n                hybridNoiseShaping: isBitSet(flags, 6),\n                floatingPoint: isBitSet(flags, 7),\n                samplingRate: SampleRates[getBitAllignedNumber(flags, 23, 4)],\n                isDSD: isBitSet(flags, 31)\n            },\n            // crc for actual decoded data\n            crc: new Token.Uint8ArrayType(4).get(buf, off + 28)\n        };\n        if (res.flags.isDSD) {\n            res.totalSamples *= 8;\n        }\n        return res;\n    }\n};\n/**\n * 3.0 Metadata Sub-Blocks\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 4/6: 3.0 \"Metadata Sub-Block\")\n */\nexport const MetadataIdToken = {\n    len: 1,\n    get: (buf, off) => {\n        return {\n            functionId: getBitAllignedNumber(buf[off], 0, 6), // functionId overlaps with isOptional flag\n            isOptional: isBitSet(buf[off], 5),\n            isOddSize: isBitSet(buf[off], 6),\n            largeBlock: isBitSet(buf[off], 7)\n        };\n    }\n};\nfunction isBitSet(flags, bitOffset) {\n    return getBitAllignedNumber(flags, bitOffset, 1) === 1;\n}\nfunction getBitAllignedNumber(flags, bitOffset, len) {\n    return (flags >>> bitOffset) & (0xffffffff >>> (32 - len));\n}\n","import * as Token from 'token-types';\nimport { tryParseApeHeader } from '../apev2/APEv2Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { BlockHeaderToken, MetadataIdToken } from './WavPackToken.js';\nimport initDebug from 'debug';\nimport { uint8ArrayToHex } from 'uint8array-extras';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:WavPack');\nexport class WavPackContentError extends makeUnexpectedFileContentError('WavPack') {\n}\n/**\n * WavPack Parser\n */\nexport class WavPackParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioDataSize = 0;\n    }\n    async parse() {\n        this.metadata.setAudioOnly();\n        this.audioDataSize = 0;\n        // First parse all WavPack blocks\n        await this.parseWavPackBlocks();\n        // try to parse APEv2 header\n        return tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async parseWavPackBlocks() {\n        do {\n            const blockId = await this.tokenizer.peekToken(FourCcToken);\n            if (blockId !== 'wvpk')\n                break;\n            const header = await this.tokenizer.readToken(BlockHeaderToken);\n            if (header.BlockID !== 'wvpk')\n                throw new WavPackContentError('Invalid WavPack Block-ID');\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${BlockHeaderToken.len}`);\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\n                this.metadata.setFormat('container', 'WavPack');\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\n                // tagTypes: this.type,\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n                if (!header.flags.isDSD) {\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n                }\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n            }\n            const ignoreBytes = header.blockSize - (BlockHeaderToken.len - 8);\n            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));\n            if (header.blockSamples > 0) {\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n            }\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= BlockHeaderToken.len);\n        if (this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n        }\n    }\n    /**\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n     * @param header Header\n     * @param remainingLength Remaining length\n     */\n    async parseMetadataSubBlock(header, remainingLength) {\n        let remaining = remainingLength;\n        while (remaining > MetadataIdToken.len) {\n            const id = await this.tokenizer.readToken(MetadataIdToken);\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n            const data = new Uint8Array(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n            await this.tokenizer.readBuffer(data);\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n            switch (id.functionId) {\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\n                    break;\n                case 0xe: { // ID_DSD_BLOCK\n                    debug('ID_DSD_BLOCK');\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    const mp = 1 << Token.UINT8.get(data, 0);\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    if (!header.flags.isDSD)\n                        throw new WavPackContentError('Only expect DSD block if DSD-flag is set');\n                    this.metadata.setFormat('sampleRate', samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n                    break;\n                }\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\n                    break;\n                case 0x26: // ID_MD5_CHECKSUM\n                    this.metadata.setFormat('audioMD5', data);\n                    break;\n                case 0x2f: // ID_BLOCK_CHECKSUM\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${uint8ArrayToHex(data)}`);\n                    break;\n                default:\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n                    break;\n            }\n            remaining -= MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n            debug(`remainingLength=${remaining}`);\n            if (id.isOddSize)\n                this.tokenizer.ignore(1);\n        }\n        if (remaining !== 0)\n            throw new WavPackContentError('metadata-sub-block should fit it remaining length');\n    }\n}\n"],"names":["SampleRates","BlockHeaderToken","len","get","buf","off","flags","Token","res","BlockID","FourCcToken","blockSize","version","totalSamples","blockIndex","blockSamples","bitsPerSample","getBitAllignedNumber","isMono","isBitSet","isHybrid","isJointStereo","crossChannel","hybridNoiseShaping","floatingPoint","samplingRate","isDSD","crc","MetadataIdToken","functionId","isOptional","isOddSize","largeBlock","bitOffset","debug","initDebug","WavPackContentError","makeUnexpectedFileContentError","WavPackParser","BasicParser","constructor","super","arguments","this","audioDataSize","parse","metadata","setAudioOnly","parseWavPackBlocks","tryParseApeHeader","tokenizer","options","blockId","peekToken","header","readToken","format","container","setFormat","ignoreBytes","parseMetadataSubBlock","ignore","fileInfo","size","position","duration","remainingLength","remaining","id","dataSizeInWords","readNumber","data","Uint8Array","readBuffer","toString","length","mp","uint8ArrayToHex"],"sourceRoot":""}