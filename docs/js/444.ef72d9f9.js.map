{"version":3,"file":"js/444.ef72d9f9.js","mappings":"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","sources":["webpack://kwplayer/./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js","webpack://kwplayer/./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js","webpack://kwplayer/./node_modules/music-metadata/lib/mpeg/XingTag.js","webpack://kwplayer/./node_modules/music-metadata/lib/mpeg/MpegParser.js","webpack://kwplayer/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["import * as common from '../common/Util.js';\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\n */\nconst NameCode = {\n    /**\n     * not set\n     */\n    not_set: 0,\n    /**\n     * Radio Gain Adjustment\n     */\n    radio: 1,\n    /**\n     * Audiophile Gain Adjustment\n     */\n    audiophile: 2\n};\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\n */\nconst ReplayGainOriginator = {\n    /**\n     * Replay Gain unspecified\n     */\n    unspecified: 0,\n    /**\n     * Replay Gain pre-set by artist/producer/mastering engineer\n     */\n    engineer: 1,\n    /**\n     * Replay Gain set by user\n     */\n    user: 2,\n    /**\n     * Replay Gain determined automatically, as described on this site\n     */\n    automatic: 3,\n    /**\n     * Set by simple RMS average\n     */\n    rms_average: 4\n};\n/**\n * Replay Gain Data Format\n *\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\n */\nexport const ReplayGain = {\n    len: 2,\n    get: (buf, off) => {\n        const gain_type = common.getBitAllignedNumber(buf, off, 0, 3);\n        const sign = common.getBitAllignedNumber(buf, off, 6, 1);\n        const gain_adj = common.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\n        if (gain_type > 0) {\n            return {\n                type: common.getBitAllignedNumber(buf, off, 0, 3),\n                origin: common.getBitAllignedNumber(buf, off, 3, 3),\n                adjustment: (sign ? -gain_adj : gain_adj)\n            };\n        }\n        return undefined;\n    }\n};\n","/**\n * Extended Lame Header\n */\nimport * as Token from 'token-types';\nimport * as common from '../common/Util.js';\nimport { ReplayGain } from './ReplayGainDataFormat.js';\n/**\n * Info Tag\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\n */\nexport const ExtendedLameHeader = {\n    len: 27,\n    get: (buf, off) => {\n        const track_peak = Token.UINT32_BE.get(buf, off + 2);\n        return {\n            revision: common.getBitAllignedNumber(buf, off, 0, 4),\n            vbr_method: common.getBitAllignedNumber(buf, off, 4, 4),\n            lowpass_filter: 100 * Token.UINT8.get(buf, off + 1),\n            track_peak: track_peak === 0 ? null : track_peak / 2 ** 23,\n            track_gain: ReplayGain.get(buf, 6),\n            album_gain: ReplayGain.get(buf, 8),\n            music_length: Token.UINT32_BE.get(buf, off + 20),\n            music_crc: Token.UINT8.get(buf, off + 24),\n            header_crc: Token.UINT16_BE.get(buf, off + 24)\n        };\n    }\n};\n","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { ExtendedLameHeader } from './ExtendedLameHeader.js';\n/**\n * Info Tag: Xing, LAME\n */\nexport const InfoTagHeaderTag = new Token.StringType(4, 'ascii');\n/**\n * LAME TAG value\n * Did not find any official documentation for this\n * Value e.g.: \"3.98.4\"\n */\nexport const LameEncoderVersion = new Token.StringType(6, 'ascii');\n/**\n * Info Tag\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n */\nexport const XingHeaderFlags = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            frames: util.isBitSet(buf, off, 31),\n            bytes: util.isBitSet(buf, off, 30),\n            toc: util.isBitSet(buf, off, 29),\n            vbrScale: util.isBitSet(buf, off, 28)\n        };\n    }\n};\n// /**\n//  * XING Header Tag\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n//  */\nexport async function readXingHeader(tokenizer) {\n    const flags = await tokenizer.readToken(XingHeaderFlags);\n    const xingInfoTag = { numFrames: null, streamSize: null, vbrScale: null };\n    if (flags.frames) {\n        xingInfoTag.numFrames = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.bytes) {\n        xingInfoTag.streamSize = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.toc) {\n        xingInfoTag.toc = new Uint8Array(100);\n        await tokenizer.readBuffer(xingInfoTag.toc);\n    }\n    if (flags.vbrScale) {\n        xingInfoTag.vbrScale = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    const lameTag = await tokenizer.peekToken(new Token.StringType(4, 'ascii'));\n    if (lameTag === 'LAME') {\n        await tokenizer.ignore(4);\n        xingInfoTag.lame = {\n            version: await tokenizer.readToken(new Token.StringType(5, 'ascii'))\n        };\n        const match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\n        if (match !== null) {\n            const majorMinorVersion = match[0]; // e.g. 3.97\n            const version = majorMinorVersion.split('.').map(n => Number.parseInt(n, 10));\n            if (version[0] >= 3 && version[1] >= 90) {\n                xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader);\n            }\n        }\n    }\n    return xingInfoTag;\n}\n","import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport * as common from '../common/Util.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { InfoTagHeaderTag, LameEncoderVersion, readXingHeader } from './XingTag.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:mpeg');\nexport class MpegContentError extends makeUnexpectedFileContentError('MPEG') {\n}\n/**\n * Cache buffer size used for searching synchronization preabmle\n */\nconst maxPeekLen = 1024;\n/**\n * MPEG-4 Audio definitions\n * Ref:  https://wiki.multimedia.cx/index.php/MPEG-4_Audio\n */\nconst MPEG4 = {\n    /**\n     * Audio Object Types\n     */\n    AudioObjectTypes: [\n        'AAC Main',\n        'AAC LC', // Low Complexity\n        'AAC SSR', // Scalable Sample Rate\n        'AAC LTP' // Long Term Prediction\n    ],\n    /**\n     * Sampling Frequencies\n     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies\n     */\n    SamplingFrequencies: [\n        96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350, null, null, -1\n    ]\n    /**\n     * Channel Configurations\n     */\n};\nconst MPEG4_ChannelConfigurations = [\n    undefined,\n    ['front-center'],\n    ['front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right', 'back-center'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right', 'LFE-channel'],\n    ['front-center', 'front-left', 'front-right', 'side-left', 'side-right', 'back-left', 'back-right', 'LFE-channel']\n];\n/**\n * MPEG Audio Layer I/II/III frame header\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\n * Ref: https://wiki.multimedia.cx/index.php/ADTS\n */\nclass MpegFrameHeader {\n    constructor(buf, off) {\n        // E(15,12): Bitrate index\n        this.bitrateIndex = null;\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = null;\n        // G(9): Padding bit\n        this.padding = null;\n        // H(8): Private bit\n        this.privateBit = null;\n        // I(7,6): Channel Mode\n        this.channelModeIndex = null;\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = null;\n        // L(2): Original\n        this.isOriginalMedia = null;\n        this.version = null;\n        this.bitrate = null;\n        this.samplingRate = null;\n        this.frameLength = 0;\n        // B(20,19): MPEG Audio versionIndex ID\n        this.versionIndex = common.getBitAllignedNumber(buf, off + 1, 3, 2);\n        // C(18,17): Layer description\n        this.layer = MpegFrameHeader.LayerDescription[common.getBitAllignedNumber(buf, off + 1, 5, 2)];\n        if (this.versionIndex > 1 && this.layer === 0) {\n            this.parseAdtsHeader(buf, off); // Audio Data Transport Stream (ADTS)\n        }\n        else {\n            this.parseMpegHeader(buf, off); // Conventional MPEG header\n        }\n        // D(16): Protection bit (if true 16-bit CRC follows header)\n        this.isProtectedByCRC = !common.isBitSet(buf, off + 1, 7);\n    }\n    calcDuration(numFrames) {\n        return this.samplingRate == null ? null : (numFrames * this.calcSamplesPerFrame() / this.samplingRate);\n    }\n    calcSamplesPerFrame() {\n        return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];\n    }\n    calculateSideInfoLength() {\n        if (this.layer !== 3)\n            return 2;\n        if (this.channelModeIndex === 3) {\n            // mono\n            if (this.version === 1) {\n                return 17;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 9;\n            }\n        }\n        else {\n            if (this.version === 1) {\n                return 32;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 17;\n            }\n        }\n        return null;\n    }\n    calcSlotSize() {\n        return [null, 4, 1, 1][this.layer];\n    }\n    parseMpegHeader(buf, off) {\n        this.container = 'MPEG';\n        // E(15,12): Bitrate index\n        this.bitrateIndex = common.getBitAllignedNumber(buf, off + 2, 0, 4);\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = common.getBitAllignedNumber(buf, off + 2, 4, 2);\n        // G(9): Padding bit\n        this.padding = common.isBitSet(buf, off + 2, 6);\n        // H(8): Private bit\n        this.privateBit = common.isBitSet(buf, off + 2, 7);\n        // I(7,6): Channel Mode\n        this.channelModeIndex = common.getBitAllignedNumber(buf, off + 3, 0, 2);\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = common.getBitAllignedNumber(buf, off + 3, 2, 2);\n        // K(3): Copyright\n        this.isCopyrighted = common.isBitSet(buf, off + 3, 4);\n        // L(2): Original\n        this.isOriginalMedia = common.isBitSet(buf, off + 3, 5);\n        // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n        this.emphasis = common.getBitAllignedNumber(buf, off + 3, 7, 2);\n        this.version = MpegFrameHeader.VersionID[this.versionIndex];\n        this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\n        this.codec = `MPEG ${this.version} Layer ${this.layer}`;\n        // Calculate bitrate\n        const bitrateInKbps = this.calcBitrate();\n        if (!bitrateInKbps) {\n            throw new MpegContentError('Cannot determine bit-rate');\n        }\n        this.bitrate = bitrateInKbps * 1000;\n        // Calculate sampling rate\n        this.samplingRate = this.calcSamplingRate();\n        if (this.samplingRate == null) {\n            throw new MpegContentError('Cannot determine sampling-rate');\n        }\n    }\n    parseAdtsHeader(buf, off) {\n        debug(\"layer=0 => ADTS\");\n        this.version = this.versionIndex === 2 ? 4 : 2;\n        this.container = `ADTS/MPEG-${this.version}`;\n        const profileIndex = common.getBitAllignedNumber(buf, off + 2, 0, 2);\n        this.codec = 'AAC';\n        this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];\n        debug(`MPEG-4 audio-codec=${this.codec}`);\n        const samplingFrequencyIndex = common.getBitAllignedNumber(buf, off + 2, 2, 4);\n        this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];\n        debug(`sampling-rate=${this.samplingRate}`);\n        const channelIndex = common.getBitAllignedNumber(buf, off + 2, 7, 3);\n        this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];\n        debug(`channel-config=${this.mp4ChannelConfig ? this.mp4ChannelConfig.join('+') : '?'}`);\n        this.frameLength = common.getBitAllignedNumber(buf, off + 3, 6, 2) << 11;\n    }\n    calcBitrate() {\n        if (this.bitrateIndex === 0x00 || // free\n            this.bitrateIndex === 0x0F) { // reserved\n            return null;\n        }\n        if (this.version && this.bitrateIndex) {\n            const codecIndex = 10 * Math.floor(this.version) + this.layer;\n            return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];\n        }\n        return null;\n    }\n    calcSamplingRate() {\n        if (this.sampRateFreqIndex === 0x03 || this.version === null || this.sampRateFreqIndex == null)\n            return null; // 'reserved'\n        return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\n    }\n}\nMpegFrameHeader.SyncByte1 = 0xFF;\nMpegFrameHeader.SyncByte2 = 0xE0;\nMpegFrameHeader.VersionID = [2.5, null, 2, 1];\nMpegFrameHeader.LayerDescription = [0, 3, 2, 1];\nMpegFrameHeader.ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\nMpegFrameHeader.bitrate_index = {\n    1: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },\n    2: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },\n    3: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },\n    4: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },\n    5: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },\n    6: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },\n    7: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },\n    8: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },\n    9: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },\n    10: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },\n    11: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },\n    12: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },\n    13: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },\n    14: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }\n};\nMpegFrameHeader.sampling_rate_freq_index = {\n    1: { 0: 44100, 1: 48000, 2: 32000 },\n    2: { 0: 22050, 1: 24000, 2: 16000 },\n    2.5: { 0: 11025, 1: 12000, 2: 8000 }\n};\nMpegFrameHeader.samplesInFrameTable = [\n    /* Layer   I    II   III */\n    [0, 384, 1152, 1152], // MPEG-1\n    [0, 384, 1152, 576] // MPEG-2(.5\n];\n/**\n * MPEG Audio Layer I/II/III\n */\nconst FrameHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return new MpegFrameHeader(buf, off);\n    }\n};\nfunction getVbrCodecProfile(vbrScale) {\n    return `V${Math.floor((100 - vbrScale) / 10)}`;\n}\nexport class MpegParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.frameCount = 0;\n        this.syncFrameCount = -1;\n        this.countSkipFrameData = 0;\n        this.totalDataLength = 0;\n        this.bitrates = [];\n        this.offset = 0;\n        this.frame_size = 0;\n        this.crc = null;\n        this.calculateEofDuration = false;\n        this.samplesPerFrame = null;\n        this.buf_frame_header = new Uint8Array(4);\n        /**\n         * Number of bytes already parsed since beginning of stream / file\n         */\n        this.mpegOffset = null;\n        this.syncPeek = {\n            buf: new Uint8Array(maxPeekLen),\n            len: 0\n        };\n    }\n    /**\n     * Called after ID3 headers have been parsed\n     */\n    async postId3v2Parse() {\n        this.metadata.setFormat('lossless', false);\n        this.metadata.setAudioOnly();\n        try {\n            let quit = false;\n            while (!quit) {\n                await this.sync();\n                quit = await this.parseCommonMpegHeader();\n            }\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n                if (this.calculateEofDuration) {\n                    if (this.samplesPerFrame !== null) {\n                        const numberOfSamples = this.frameCount * this.samplesPerFrame;\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        if (this.metadata.format.sampleRate) {\n                            const duration = numberOfSamples / this.metadata.format.sampleRate;\n                            debug(`Calculate duration at EOF: ${duration} sec.`, duration);\n                            this.metadata.setFormat('duration', duration);\n                        }\n                    }\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    /**\n     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length\n     */\n    finalize() {\n        const format = this.metadata.format;\n        const hasID3v1 = !!this.metadata.native.ID3v1;\n        if (this.mpegOffset !== null) {\n            if (format.duration && this.tokenizer.fileInfo.size) {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (format.codecProfile && format.codecProfile[0] === 'V') {\n                    this.metadata.setFormat('bitrate', mpegSize * 8 / format.duration);\n                }\n            }\n            if (this.tokenizer.fileInfo.size && format.codecProfile === 'CBR') {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (this.frame_size !== null && this.samplesPerFrame !== null) {\n                    const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;\n                    this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                    if (format.sampleRate && !format.duration) {\n                        const duration = numberOfSamples / format.sampleRate;\n                        debug(\"Calculate CBR duration based on file size: %s\", duration);\n                        this.metadata.setFormat('duration', duration);\n                    }\n                }\n            }\n        }\n    }\n    async sync() {\n        let gotFirstSync = false;\n        while (true) {\n            let bo = 0;\n            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });\n            if (this.syncPeek.len <= 163) {\n                throw new EndOfStreamError();\n            }\n            while (true) {\n                if (gotFirstSync && (this.syncPeek.buf[bo] & 0xE0) === 0xE0) {\n                    this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;\n                    this.buf_frame_header[1] = this.syncPeek.buf[bo];\n                    await this.tokenizer.ignore(bo);\n                    debug(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);\n                    if (this.syncFrameCount === this.frameCount) {\n                        debug(`Re-synced MPEG stream, frameCount=${this.frameCount}`);\n                        this.frameCount = 0;\n                        this.frame_size = 0;\n                    }\n                    this.syncFrameCount = this.frameCount;\n                    return; // sync\n                }\n                gotFirstSync = false;\n                bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);\n                if (bo === -1) {\n                    if (this.syncPeek.len < this.syncPeek.buf.length) {\n                        throw new EndOfStreamError();\n                    }\n                    await this.tokenizer.ignore(this.syncPeek.len);\n                    break; // continue with next buffer\n                }\n                ++bo;\n                gotFirstSync = true;\n            }\n        }\n    }\n    /**\n     * Combined ADTS & MPEG (MP2 & MP3) header handling\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseCommonMpegHeader() {\n        if (this.frameCount === 0) {\n            this.mpegOffset = this.tokenizer.position - 1;\n        }\n        await this.tokenizer.peekBuffer(this.buf_frame_header.subarray(1), { length: 3 });\n        let header;\n        try {\n            header = FrameHeader.get(this.buf_frame_header, 0);\n        }\n        catch (err) {\n            await this.tokenizer.ignore(1);\n            if (err instanceof Error) {\n                this.metadata.addWarning(`Parse error: ${err.message}`);\n                return false; // sync\n            }\n            throw err;\n        }\n        await this.tokenizer.ignore(3);\n        this.metadata.setFormat('container', header.container);\n        this.metadata.setFormat('codec', header.codec);\n        this.metadata.setFormat('lossless', false);\n        this.metadata.setFormat('sampleRate', header.samplingRate);\n        this.frameCount++;\n        return header.version !== null && header.version >= 2 && header.layer === 0 ? this.parseAdts(header) : this.parseAudioFrameHeader(header);\n    }\n    /**\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseAudioFrameHeader(header) {\n        this.metadata.setFormat('numberOfChannels', header.channelMode === 'mono' ? 1 : 2);\n        this.metadata.setFormat('bitrate', header.bitrate);\n        if (this.frameCount < 20 * 10000) {\n            debug('offset=%s MP%s bitrate=%s sample-rate=%s', this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);\n        }\n        const slot_size = header.calcSlotSize();\n        if (slot_size === null) {\n            throw new MpegContentError('invalid slot_size');\n        }\n        const samples_per_frame = header.calcSamplesPerFrame();\n        debug(`samples_per_frame=${samples_per_frame}`);\n        const bps = samples_per_frame / 8.0;\n        if (header.bitrate !== null && header.samplingRate != null) {\n            const fsize = (bps * header.bitrate / header.samplingRate) + ((header.padding) ? slot_size : 0);\n            this.frame_size = Math.floor(fsize);\n        }\n        this.audioFrameHeader = header;\n        if (header.bitrate !== null) {\n            this.bitrates.push(header.bitrate);\n        }\n        // xtra header only exists in first frame\n        if (this.frameCount === 1) {\n            this.offset = FrameHeader.len;\n            await this.skipSideInformation();\n            return false;\n        }\n        if (this.frameCount === 4) {\n            // the stream is CBR if the first 3 frame bitrates are the same\n            if (this.areAllSame(this.bitrates)) {\n                // Actual calculation will be done in finalize\n                this.samplesPerFrame = samples_per_frame;\n                this.metadata.setFormat('codecProfile', 'CBR');\n                if (this.tokenizer.fileInfo.size)\n                    return true; // Will calculate duration based on the file size\n            }\n            else if (this.metadata.format.duration) {\n                return true; // We already got the duration, stop processing MPEG stream any further\n            }\n            if (!this.options.duration) {\n                return true; // Enforce duration not enabled, stop processing entire stream\n            }\n        }\n        // once we know the file is VBR attach listener to end of\n        // stream so we can do the duration calculation when we\n        // have counted all the frames\n        if (this.options.duration && this.frameCount === 4) {\n            this.samplesPerFrame = samples_per_frame;\n            this.calculateEofDuration = true;\n        }\n        this.offset = 4;\n        if (header.isProtectedByCRC) {\n            await this.parseCrc();\n            return false;\n        }\n        await this.skipSideInformation();\n        return false;\n    }\n    async parseAdts(header) {\n        const buf = new Uint8Array(3);\n        await this.tokenizer.readBuffer(buf);\n        header.frameLength += common.getBitAllignedNumber(buf, 0, 0, 11);\n        this.totalDataLength += header.frameLength;\n        this.samplesPerFrame = 1024;\n        if (header.samplingRate !== null) {\n            const framesPerSec = header.samplingRate / this.samplesPerFrame;\n            const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;\n            const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;\n            this.metadata.setFormat('bitrate', bitrate);\n            debug(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);\n        }\n        await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);\n        // Consume remaining header and frame data\n        if (this.frameCount === 3) {\n            this.metadata.setFormat('codecProfile', header.codecProfile);\n            if (header.mp4ChannelConfig) {\n                this.metadata.setFormat('numberOfChannels', header.mp4ChannelConfig.length);\n            }\n            if (this.options.duration) {\n                this.calculateEofDuration = true;\n            }\n            else {\n                return true; // Stop parsing after the third frame\n            }\n        }\n        return false;\n    }\n    async parseCrc() {\n        this.crc = await this.tokenizer.readNumber(Token.INT16_BE);\n        this.offset += 2;\n        return this.skipSideInformation();\n    }\n    async skipSideInformation() {\n        if (this.audioFrameHeader) {\n            const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();\n            if (sideinfo_length !== null) {\n                await this.tokenizer.readToken(new Token.Uint8ArrayType(sideinfo_length));\n                // side information\n                this.offset += sideinfo_length;\n                await this.readXtraInfoHeader();\n                return;\n            }\n        }\n    }\n    async readXtraInfoHeader() {\n        const headerTag = await this.tokenizer.readToken(InfoTagHeaderTag);\n        this.offset += InfoTagHeaderTag.len; // 12\n        switch (headerTag) {\n            case 'Info':\n                this.metadata.setFormat('codecProfile', 'CBR');\n                return this.readXingInfoHeader();\n            case 'Xing': {\n                const infoTag = await this.readXingInfoHeader();\n                if (infoTag.vbrScale !== null) {\n                    const codecProfile = getVbrCodecProfile(infoTag.vbrScale);\n                    this.metadata.setFormat('codecProfile', codecProfile);\n                }\n                return null;\n            }\n            case 'Xtra':\n                // ToDo: ???\n                break;\n            case 'LAME': {\n                const version = await this.tokenizer.readToken(LameEncoderVersion);\n                if (this.frame_size !== null && this.frame_size >= this.offset + LameEncoderVersion.len) {\n                    this.offset += LameEncoderVersion.len;\n                    this.metadata.setFormat('tool', `LAME ${version}`);\n                    await this.skipFrameData(this.frame_size - this.offset);\n                    return null;\n                }\n                this.metadata.addWarning('Corrupt LAME header');\n                break;\n            }\n            // ToDo: ???\n        }\n        // ToDo: promise duration???\n        const frameDataLeft = this.frame_size - this.offset;\n        if (frameDataLeft < 0) {\n            this.metadata.addWarning(`Frame ${this.frameCount}corrupt: negative frameDataLeft`);\n        }\n        else {\n            await this.skipFrameData(frameDataLeft);\n        }\n        return null;\n    }\n    /**\n     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n     * @returns {Promise<string>}\n     */\n    async readXingInfoHeader() {\n        const offset = this.tokenizer.position;\n        const infoTag = await readXingHeader(this.tokenizer);\n        this.offset += this.tokenizer.position - offset;\n        if (infoTag.lame) {\n            this.metadata.setFormat('tool', `LAME ${common.stripNulls(infoTag.lame.version)}`);\n            if (infoTag.lame.extended) {\n                // this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain);\n                this.metadata.setFormat('trackPeakLevel', infoTag.lame.extended.track_peak);\n                if (infoTag.lame.extended.track_gain) {\n                    this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain.adjustment);\n                }\n                if (infoTag.lame.extended.album_gain) {\n                    this.metadata.setFormat('albumGain', infoTag.lame.extended.album_gain.adjustment);\n                }\n                this.metadata.setFormat('duration', infoTag.lame.extended.music_length / 1000);\n            }\n        }\n        if (infoTag.streamSize && this.audioFrameHeader && infoTag.numFrames !== null) {\n            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);\n            this.metadata.setFormat('duration', duration);\n            debug('Get duration from Xing header: %s', this.metadata.format.duration);\n            return infoTag;\n        }\n        // frames field is not present\n        const frameDataLeft = this.frame_size - this.offset;\n        await this.skipFrameData(frameDataLeft);\n        return infoTag;\n    }\n    async skipFrameData(frameDataLeft) {\n        if (frameDataLeft < 0)\n            throw new MpegContentError('frame-data-left cannot be negative');\n        await this.tokenizer.ignore(frameDataLeft);\n        this.countSkipFrameData += frameDataLeft;\n    }\n    areAllSame(array) {\n        const first = array[0];\n        return array.every(element => {\n            return element === first;\n        });\n    }\n}\n","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n"],"names":["ReplayGain","len","get","buf","off","gain_type","common","sign","gain_adj","type","origin","adjustment","ExtendedLameHeader","track_peak","Token","revision","vbr_method","lowpass_filter","track_gain","album_gain","music_length","music_crc","header_crc","InfoTagHeaderTag","LameEncoderVersion","XingHeaderFlags","frames","util","bytes","toc","vbrScale","async","readXingHeader","tokenizer","flags","readToken","xingInfoTag","numFrames","streamSize","Uint8Array","readBuffer","lameTag","peekToken","ignore","lame","version","match","majorMinorVersion","split","map","n","Number","parseInt","extended","debug","initDebug","MpegContentError","makeUnexpectedFileContentError","maxPeekLen","MPEG4","AudioObjectTypes","SamplingFrequencies","MPEG4_ChannelConfigurations","undefined","MpegFrameHeader","constructor","this","bitrateIndex","sampRateFreqIndex","padding","privateBit","channelModeIndex","modeExtension","isOriginalMedia","bitrate","samplingRate","frameLength","versionIndex","layer","LayerDescription","parseAdtsHeader","parseMpegHeader","isProtectedByCRC","calcDuration","calcSamplesPerFrame","samplesInFrameTable","calculateSideInfoLength","calcSlotSize","container","isCopyrighted","emphasis","VersionID","channelMode","ChannelMode","codec","bitrateInKbps","calcBitrate","calcSamplingRate","profileIndex","codecProfile","samplingFrequencyIndex","channelIndex","mp4ChannelConfig","join","codecIndex","Math","floor","bitrate_index","sampling_rate_freq_index","SyncByte1","SyncByte2","FrameHeader","getVbrCodecProfile","MpegParser","AbstractID3Parser","super","arguments","frameCount","syncFrameCount","countSkipFrameData","totalDataLength","bitrates","offset","frame_size","crc","calculateEofDuration","samplesPerFrame","buf_frame_header","mpegOffset","syncPeek","postId3v2Parse","metadata","setFormat","setAudioOnly","quit","sync","parseCommonMpegHeader","err","EndOfStreamError","numberOfSamples","format","sampleRate","duration","finalize","hasID3v1","native","ID3v1","fileInfo","size","mpegSize","round","gotFirstSync","bo","peekBuffer","length","mayBeLess","position","indexOf","header","subarray","Error","addWarning","message","parseAdts","parseAudioFrameHeader","slot_size","samples_per_frame","bps","fsize","audioFrameHeader","push","skipSideInformation","areAllSame","options","parseCrc","framesPerSec","bytesPerFrame","readNumber","sideinfo_length","readXtraInfoHeader","headerTag","readXingInfoHeader","infoTag","skipFrameData","frameDataLeft","array","first","every","element","BasicParser","id3parser","ID3v2Parser","startsWithID3v2Header","ID3v2Header","fileIdentifier","parse","parseID3v2","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser","ID3v1Parser","id3Header"],"sourceRoot":""}